<?xml version="1.0" encoding="UTF-8"?>

<!--
/**
 * Rendering stylesheet for Liferea (multi headline view)
 *
 * Copyright (C) 2006 Lars Lindner <lars.lindner@gmx.net>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version. 
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
--> 

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"
                xmlns="http://www.w3.org/1999/xhtml">

<xsl:output method="xml" version="1.0" indent="yes"/>

<!-- the local pixmap directory (e.g. /usr/share/liferea/pixmaps/) -->
<xsl:param name="pixmapsDir"/>
<!-- the base URL of the rendered item set -->
<xsl:param name="baseUrl"/>

<xsl:template match="/feed">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8" />
##STYLE_INSERT##
</head>
<body>

<!-- base URL of the itemset -->
<xsl:element name="div">
<xsl:attribute name="href">
   <xsl:value-of select="$baseUrl"/>
</xsl:attribute>

<!-- header table -->
<table class="itemhead" cellspacing="0" cellpadding="0">
<tr>
  <td valign="middle" class="headleft">
    <xsl:if test="favicon">
    <!-- Feed link as favicon -->
    <xsl:element name="a">
      <xsl:attribute name="class">favicon</xsl:attribute>
      <xsl:attribute name="href">
        <xsl:value-of select="feedLink"/>
      </xsl:attribute>
      <xsl:element name="img">
        <xsl:attribute name="src">
           <xsl:value-of select="favicon"/>
        </xsl:attribute>
      </xsl:element>
    </xsl:element>
    </xsl:if>
  </td>
  <td width="100%" valign="middle" class="headright">
    <!-- Feed title as link -->
    <xsl:element name="a">
      <xsl:attribute name="class">itemhead</xsl:attribute>
      <xsl:attribute name="href">
        <xsl:value-of select="feedSource"/>
      </xsl:attribute>
      <xsl:value-of select="feedTitle"/>
    </xsl:element>
  </td>
</tr>
</table>

<ul>
<xsl:for-each select="item">
  <xsl:call-template name="item"/>
</xsl:for-each>
</ul>

</xsl:element> <!-- end of base URL div -->

</body>
</html>

</xsl:template>

<xsl:template name="item">

<xsl:element name="li">
  <xsl:attribute name="class">
    <xsl:choose>
      <xsl:when test="readStatus = '0'">summaryshaded</xsl:when>
      <xsl:otherwise>summaryunshaded</xsl:otherwise>
    </xsl:choose>
  </xsl:attribute>

  <!-- Item title as link -->
  <xsl:element name="a">
    <xsl:attribute name="href">
      <xsl:value-of select="source"/>
    </xsl:attribute>
    <xsl:value-of select="title"/>
  </xsl:element>

</xsl:element>


<!-- summary mode means most of the items have no description,
     but lets output them for those who have one... -->
<xsl:if test="description">
   <br/><br/>
   <xsl:value-of select="description" disable-output-escaping='yes'/>
</xsl:if>

<!-- enclosures -->
<xsl:for-each select="attributes/attribute[ @name = 'enclosure' ]">
    (<xsl:element name="a">
      <xsl:attribute name="class">enclosure</xsl:attribute>
      <xsl:attribute name="href"><xsl:value-of select="."/></xsl:attribute>
      <xsl:call-template name="substring-after-last">
        <xsl:with-param name="input"  select="." />
        <xsl:with-param name="substr" select="'/'" />
      </xsl:call-template>
    </xsl:element>)
</xsl:for-each>

</xsl:template>

<!-- substring after last occurance also from "XSLT Cookbook"...-->
<xsl:template name="substring-after-last">
    <xsl:param name="input" />
    <xsl:param name="substr" />
    
    <!-- Extract the string which comes after the first occurence -->
    <xsl:variable name="temp" select="substring-after($input,$substr)"/>
    
    <xsl:choose>
      <!-- If it still contains the search string then recursively process -->
      <xsl:when test="$substr and contains($temp,$substr)">
        <xsl:call-template name="substring-after-last">
          <xsl:with-param name="input"  select="$temp" />
          <xsl:with-param name="substr" select="$substr" />
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$temp" />
      </xsl:otherwise>
    </xsl:choose>
</xsl:template>

</xsl:stylesheet>

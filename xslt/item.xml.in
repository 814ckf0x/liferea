<?xml version="1.0" encoding="UTF-8"?>

<!--
/**
 * Rendering stylesheet for Liferea (item view: item rendering)
 *
 * Copyright (C) 2006-2007 Lars Lindner <lars.lindner@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version. 
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
--> 

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"
                xmlns="http://www.w3.org/1999/xhtml">

<xsl:output method="xml" version="1.0" indent="yes"/>

<!-- the local pixmap directory (e.g. /usr/share/liferea/pixmaps/) -->
<xsl:param name="pixmapsDir"/>
<xsl:param name="baseUrl"/>
<xsl:param name="summary"/>

<xsl:template match="/itemset">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8" />
</head>
<body>

<!-- base URL of the itemset -->
<xsl:element name="div">
<xsl:attribute name="href">
   <xsl:value-of select="$baseUrl"/>
</xsl:attribute>

<xsl:for-each select="item">
  <xsl:choose>
    <xsl:when test="$summary = '1'">
      <xsl:call-template name="item_summary"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:call-template name="item"/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:for-each>

</xsl:element> <!-- end of base URL div -->

</body>
</html>

</xsl:template>

<!-- ==================================================================== -->

<!---single item detailed mode rendering -->
<xsl:template name="item">

<!-- base URL of parent feed -->
<xsl:element name="div">
<xsl:attribute name="href">
   <xsl:value-of select="/itemset/feed/feedSource"/>
</xsl:attribute>

<!-- the item -->
<xsl:element name="div">

<!-- entering header starts delayed show of the item menu -->
<xsl:attribute name="onmouseover">
<xsl:text disable-output-escaping='yes'>doShow('</xsl:text>
<xsl:value-of select="sourceId"/>-<xsl:value-of select="nr"/>
<xsl:text disable-output-escaping='yes'>');</xsl:text>
</xsl:attribute>

<!-- leaving header stops show counter -->
<xsl:attribute name="onmouseout">stopShow();</xsl:attribute>

<!-- header table -->
<xsl:element name="table">
<xsl:attribute name="class">itemhead <xsl:if test="mark = '0'">un</xsl:if>flagged</xsl:attribute>
<xsl:attribute name="cellspacing">0</xsl:attribute>
<xsl:attribute name="cellpadding">0</xsl:attribute>

<tr>
  <td valign="middle" class="headleft">
    <!-- Feed link as favicon -->
    <xsl:element name="a">
      <xsl:attribute name="class">favicon</xsl:attribute>
      <xsl:attribute name="href"><xsl:value-of select="/itemset/feed/feedLink"/></xsl:attribute>
      <xsl:element name="img">
        <xsl:attribute name="src">
          <xsl:choose>
            <xsl:when test="not(sourceFavicon)">
              <xsl:value-of select="/itemset/feed/favicon"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="sourceFavicon"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:attribute>
      </xsl:element>
    </xsl:element>
  </td>
  <td width="100%" valign="middle" class="headright">
    <!-- Item title as link -->
    <xsl:element name="a">
      <xsl:attribute name="class">itemhead</xsl:attribute>
      <xsl:attribute name="href">
        <xsl:value-of select="source"/>
      </xsl:attribute>
      <xsl:value-of select="title"/>
      <!-- the title added above might be empty, in this 
           case we add the date of the post -->
      <xsl:if test="title = ''">
         <xsl:value-of select="timestr"/> 
      </xsl:if>
    </xsl:element>
  </td>
</tr>
</xsl:element>

<!-- enclosures -->
<xsl:for-each select="attributes/attribute[ @name = 'enclosure' ]">
<table class="enclosure" cellpadding="0" cellspacing="0">

<tr>
  <td valign="middle" class="headleft">
    <xsl:element name="a">
      <xsl:attribute name="class">favicon</xsl:attribute>
      <xsl:attribute name="href">liferea-enclosure://load?<xsl:value-of select="."/></xsl:attribute>
      <xsl:element name="img">
        <xsl:attribute name="border">0</xsl:attribute>
        <xsl:attribute name="class">enclosurebtn</xsl:attribute>
	<xsl:attribute name="src"><xsl:value-of select="$pixmapsDir"/>attachment.png</xsl:attribute>
      </xsl:element>
    </xsl:element>
  </td>
  <td width="99%">
   <xsl:choose>
    <xsl:when test="contains(.,'mp3') or contains(.,'ogg')">
      <span class="xspf_player">
        <xsl:element name="object">
          <xsl:attribute name="type">application/x-shockwave-flash</xsl:attribute>
          <xsl:attribute name="width">400</xsl:attribute>
          <xsl:attribute name="height">15</xsl:attribute>
          <xsl:attribute name="data"><xsl:value-of select="$pixmapsDir"/>../media/xspf_player_slim.swf?song_title=<xsl:call-template name="substring-after-last">
            <xsl:with-param name="input"  select="." />
            <xsl:with-param name="substr" select="'/'" />
          </xsl:call-template>&amp;song_url=<xsl:value-of select="."/>&amp;player_title=Click+to+play+<xsl:call-template name="substring-after-last">
            <xsl:with-param name="input"  select="." />
            <xsl:with-param name="substr" select="'/'" />
          </xsl:call-template>...</xsl:attribute>
          <xsl:call-template name="enclosure"/>
        </xsl:element>
      </span>
     </xsl:when>
     <xsl:otherwise>
       <xsl:call-template name="enclosure"/>
     </xsl:otherwise> 
   </xsl:choose>
  </td>
</tr>

</table>
</xsl:for-each>

<!-- header metadata (author + categories + date + source feed) -->
<table class='headmeta' cellspacing="0" cellpadding="0">

<xsl:if test="attributes/attribute[ @name = 'slash' ]">
<tr>
 <td valign="top" class='slash'> 
   <xsl:apply-templates select="attributes/attribute[ @name = 'slash']"/>
 </td>
</tr> 
</xsl:if>

<xsl:if test="real_source_url">
<tr>
 <td valign="top" class='source'> 
     <_span>Source</_span>
     <b><span class='source'>
       <xsl:element name="a">
         <xsl:attribute name="href">
           <xsl:value-of select="real_source_url"/>
         </xsl:attribute>
         <xsl:value-of select="real_source_title"/>
       </xsl:element>
     </span></b>
 </td>
</tr>
</xsl:if>

<!-- if there is no item set source then this is a merged item list
     rendering and we should display the source feed title for the item -->
<xsl:if test="not(/itemset/source)">
<tr>
 <td valign="top" class='source'> 
     <_span>Feed</_span>
     <b><span class='source'>
       <xsl:element name="a">
         <xsl:attribute name="href">
           <xsl:value-of select="/itemset/feed/feedLink"/>
         </xsl:attribute>
         <xsl:value-of select="/itemset/feed/feedTitle"/>
       </xsl:element>
     </span></b>
 </td>
</tr>
</xsl:if>

<xsl:if test="attributes/attribute[ @name = 'category' ]">
<tr>
 <td valign="top" class='categories'>
     <_span>Filed under</_span>
     <b><span class='categories'>
       <xsl:for-each select="attributes/attribute[ @name = 'category' ]">
         <xsl:if test="position() != 1">, </xsl:if>
         <xsl:value-of select="." disable-output-escaping='yes'/>
       </xsl:for-each>
     </span></b>
 </td>
</tr>
</xsl:if>

<xsl:if test="attributes/attribute[ @name = 'author' ]">
 <tr>
   <td valign="top" class='author'>
     <_span>Author</_span>
     <b><span class='author'>
       <xsl:value-of select="attributes/attribute[ @name = 'author' ]" disable-output-escaping='yes'/>
     </span></b>
   </td>
 </tr>
</xsl:if>  

<xsl:for-each select="duplicates/duplicateNode">
<tr>
 <td valign="top" class='source'> 
     <_span>Also posted in</_span>
     <b><span class='source'>
         <xsl:value-of select="."/>
     </span></b>
 </td>
</tr>
</xsl:for-each>

</table> <!-- end of header metadata -->

<xsl:element name="table">
<!-- construct unique id to allow Javascript showing/hiding of itemmenu -->
<xsl:attribute name="id"><xsl:value-of select="sourceId"/>-<xsl:value-of select="nr"/></xsl:attribute>
<xsl:attribute name="class">headmeta hidden</xsl:attribute>
<xsl:attribute name="cellspacing">0</xsl:attribute>
<xsl:attribute name="cellpadding">0</xsl:attribute>
<tr>
 <td class='itemmenu'> 

<!-- for comment link and search engine link -->

<!-- Flagging link -->
<xsl:element name="a">
  <xsl:attribute name="class">flag</xsl:attribute>
  <xsl:attribute name="href">liferea-flag://<xsl:value-of select="sourceId"/>-<xsl:value-of select="sourceNr"/></xsl:attribute>
  <xsl:element name="img">
    <xsl:attribute name="border">0</xsl:attribute>
    <xsl:attribute name="class">flagbtn</xsl:attribute>
    <xsl:attribute name="src"><xsl:value-of select="$pixmapsDir"/>
    <xsl:if test="mark = '0'">grayflag.png</xsl:if>
    <xsl:if test="mark = '1'">flag.png</xsl:if>
    </xsl:attribute>
  </xsl:element>
  <_span>flag</_span>
</xsl:element>
   
<!-- Tagging link -->
<!--<xsl:element name="a">
  <xsl:attribute name="class">bookmark</xsl:attribute>
  <xsl:attribute name="href">liferea-tag://<xsl:value-of select="sourceId"/>-<xsl:value-of select="nr"/></xsl:attribute>
  <xsl:element name="img">
    <xsl:attribute name="border">0</xsl:attribute>
    <xsl:attribute name="class">tagbtn</xsl:attribute>
    <xsl:attribute name="src"><xsl:value-of select="$pixmapsDir"/>tag.png</xsl:attribute>
  </xsl:element>
  <_span>add tag</_span>
</xsl:element>-->

<!-- Bookmarking link -->
<xsl:element name="a">
  <xsl:attribute name="class">bookmark</xsl:attribute>
  <xsl:attribute name="href">liferea-bookmark://<xsl:value-of select="sourceId"/>-<xsl:value-of select="nr"/></xsl:attribute>
  <xsl:element name="img">
    <xsl:attribute name="border">0</xsl:attribute>
    <xsl:attribute name="class">bookmarkbtn</xsl:attribute>
    <xsl:attribute name="src"><xsl:value-of select="$pixmapsDir"/>bookmark.png</xsl:attribute>
  </xsl:element>
  <_span>bookmark</_span>
</xsl:element>

<!-- Comments link -->
<xsl:if test="attributes/attribute[ @name = 'commentsUri' ]">
  <xsl:element name="a">
    <xsl:attribute name="href">
      <xsl:attribute name="class">comments</xsl:attribute>
      <xsl:value-of select="attributes/attribute[ @name = 'commentsUri' ]"/>
    </xsl:attribute>
    <xsl:element name="img">
      <xsl:attribute name="border">0</xsl:attribute>
      <xsl:attribute name="class">commentsbtn</xsl:attribute>
      <xsl:attribute name="src"><xsl:value-of select="$pixmapsDir"/>comments.png</xsl:attribute>
    </xsl:element>
    <_span>comments</_span>
  </xsl:element>
</xsl:if>

<!-- Technorati link -->
<xsl:element name="a">
  <xsl:attribute name="class">technorati</xsl:attribute>
  <xsl:attribute name="href">http://www.technorati.com/cosmos/search.html?url=<xsl:value-of select="source"/></xsl:attribute>
  <xsl:element name="img">
    <xsl:attribute name="class">technoratibtn</xsl:attribute>
    <xsl:attribute name="border">0</xsl:attribute>
    <xsl:attribute name="alt">[Technorati]</xsl:attribute>
    <xsl:attribute name="src"><xsl:value-of select="$pixmapsDir"/>technorati.png</xsl:attribute>
  </xsl:element>
  <_span>search</_span>
</xsl:element>

 </td><!-- end of comment and search engine link -->
</tr>
</xsl:element> <!-- itemmenutable -->

<xsl:element name="div">
<xsl:attribute name="class">
  <xsl:if test="readStatus = '0'">itemshaded</xsl:if>
  <xsl:if test="readStatus != '0'">itemunshaded</xsl:if>
</xsl:attribute>
<div class='content'>
  <!-- the items content -->
  <p>
    <xsl:value-of select="description" disable-output-escaping='yes'/>
  </p>
  
  <!-- comment handling -->
  <xsl:if test="attributes/attribute[ @name = 'commentFeedUri' ]"> 
     <p>     
     <xsl:choose>
        <xsl:when test="count(comments/item) = 0">
           <b><_span>No comments yet.</_span></b>
        </xsl:when>
        <xsl:otherwise>
	   <b><_span>Comments</_span></b>
	</xsl:otherwise>
     </xsl:choose>
  
     <!-- Display "comment feed updating" hint -->
     <xsl:choose>
        <xsl:when test="comments/updateState = 'updating'">
           (<_span>Updating...</_span>)
	</xsl:when>
        <xsl:otherwise>
           (<xsl:element name="a">
              <xsl:attribute name="href">liferea-refresh-comments://<xsl:value-of select="sourceId"/>-<xsl:value-of select="sourceNr"/></xsl:attribute>
              <_span>Refresh</_span>
           </xsl:element>)
        </xsl:otherwise>
     </xsl:choose>
     
     </p>
     
     <!-- Display error box if necessary -->
     <xsl:if test="comments/updateError">
        <p>
	   <div id="errors">
	      <div id="updateError">
	         <xsl:value-of select="comments/updateError"/>
	      </div>
	   </div>
	</p>
     </xsl:if>
     
     <p>     
        <xsl:for-each select="comments/item">
           <xsl:call-template name="comment_item"/>
        </xsl:for-each>
     </p>    
  </xsl:if>
</div>
</xsl:element> <!-- end of shading div -->
</xsl:element> <!-- end of base URL div -->

</xsl:element> <!-- item -->

</xsl:template>

<!-- ==================================================================== -->

<!-- slashdot namespace -->
<xsl:template match="attributes/attribute[ @name = 'slash']">
  <span class="slashSection"><_span>Section</_span></span>
  <span class="slashValue"><xsl:value-of select="substring-before(., ',')"/></span>
  <span class="slashDepartment"><_span>Department</_span></span>
  <span class="slashValue"><xsl:value-of select="substring-after(., ',')"/></span>
</xsl:template>

<!-- ==================================================================== -->

<!-- enclosure rendering -->
<xsl:template name="enclosure">
  <xsl:element name="a">
    <xsl:attribute name="class">enclosure</xsl:attribute>
    <xsl:attribute name="href"><xsl:value-of select="."/></xsl:attribute>
    <xsl:call-template name="substring-after-last">
      <xsl:with-param name="input"  select="." />
      <xsl:with-param name="substr" select="'/'" />
    </xsl:call-template>
  </xsl:element>
</xsl:template>

<!-- ==================================================================== -->

<!-- comment rendering -->
<xsl:template name="comment_item">
   <div class="comment">
      <div class="comment_title"><xsl:value-of select="title"/></div>
      <div class="comment_body"><xsl:value-of select="description" disable-output-escaping='yes'/></div>
   </div>
</xsl:template>

<!-- ==================================================================== -->

<!--- single item summary mode rendering -->
<xsl:template name="item_summary">
<xsl:element name="div">
  <xsl:attribute name="class"><xsl:choose>
      <xsl:when test="readStatus = '0'">summaryshaded</xsl:when>
      <xsl:otherwise>summaryunshaded</xsl:otherwise>
    </xsl:choose> summary<xsl:if test="mark = '0'">un</xsl:if>flagged</xsl:attribute>

  <table cellspacing="0" cellpadding="0" width="100%">
  <tr>
    <td class="summarytime" valign="top">
      <xsl:value-of select="timestr"/>
    </td>
    <td width="100%">
      <!-- Item title as link -->
      <xsl:element name="a">
        <xsl:attribute name="href">
          <xsl:value-of select="source"/>
        </xsl:attribute>
        <xsl:value-of select="title"/>
      </xsl:element>

      <!-- summary mode means most of the items have no description,
           but lets output them for those who have one... -->
      <xsl:if test="description">
        <br/><br/>
        <xsl:value-of select="description" disable-output-escaping='yes'/>
      </xsl:if>

      <!-- enclosures -->
      <xsl:for-each select="attributes/attribute[ @name = 'enclosure' ]">
        (<xsl:element name="a">
          <xsl:attribute name="class">enclosure</xsl:attribute>
          <xsl:attribute name="href"><xsl:value-of select="."/></xsl:attribute>
          <xsl:call-template name="substring-after-last">
            <xsl:with-param name="input"  select="." />
            <xsl:with-param name="substr" select="'/'" />
          </xsl:call-template>
        </xsl:element>)
      </xsl:for-each>

    </td>
  </tr>
  </table>
    
  <hr class='summary'/>

</xsl:element>
</xsl:template>

<!-- ==================================================================== -->

<!--- substring after last occurance also from "XSLT Cookbook"... -->
<xsl:template name="substring-after-last">
    <xsl:param name="input" />
    <xsl:param name="substr" />
    
    <!-- Extract the string which comes after the first occurence -->
    <xsl:variable name="temp" select="substring-after($input,$substr)"/>
    
    <xsl:choose>
      <!-- If it still contains the search string then recursively process -->
      <xsl:when test="$substr and contains($temp,$substr)">
        <xsl:call-template name="substring-after-last">
          <xsl:with-param name="input"  select="$temp" />
          <xsl:with-param name="substr" select="$substr" />
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$temp" />
      </xsl:otherwise>
    </xsl:choose>
</xsl:template>

</xsl:stylesheet>

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <assert.h>	/* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5

/* Structure for command table (replaced by luaLib's luaL_reg) */
/*typedef struct {
  const char *name;
  lua_CFunction wrapper;
} swig_lua_command_info;*/

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char         *name;
  swig_type_info   **type;
  lua_CFunction       constructor;
  void              (*destructor)(void *);
  swig_lua_method        *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
} swig_lua_class;

typedef struct {
  void             *ptr;
  swig_type_info   *type;
  int               own;	/* 1 if owned & must be destroyed */
} swig_lua_userdata;


/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner) \
  SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags) \
	SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname) \
	SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else



/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(I) {lua_pushfstring(L,"argument %d incorrect/missing",I);goto fail;}

#define SWIG_Lua_get_table(L,n) \
	(lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
		   (lua_pushstring(L, n), \
			lua_pushcfunction(L, f), \
			lua_rawset(L,-3))

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*	there should be 2 params passed in
	(1) table (not the meta table)
	(2) string name of the attribute
	printf("SWIG_Lua_module_get %p(%s) '%s'\n",
				lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
				lua_tostring(L,2));
*/
	/* get the metatable */
	assert(lua_istable(L,1));	/* just in case */
	lua_getmetatable(L,1);	/* get the metatable */
	assert(lua_istable(L,-1));	/* just in case */
	SWIG_Lua_get_table(L,".get");	/* get the .get table */
	lua_remove(L,3);	/* remove metatable */
	if (lua_istable(L,-1))
	{
		/* look for the key in the .get table */
		lua_pushvalue(L,2);  /* key */
		lua_rawget(L,-2);
		lua_remove(L,3);	/* remove .get */
		if (lua_iscfunction(L,-1))
		{	/* found it so call the fn & return its value */
			lua_call(L,0,1);
			return 1;
		}
		lua_pop(L,1);	/* remove the top */
	}
	lua_pop(L,1);	/* remove the .get */
	lua_pushnil(L);	/* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*	there should be 3 params passed in
	(1) table (not the meta table)
	(2) string name of the attribute
	(3) any for the new value
*/
	/* get the metatable */
	assert(lua_istable(L,1));	/* just in case */
	lua_getmetatable(L,1);	/* get the metatable */
	assert(lua_istable(L,-1));	/* just in case */
	SWIG_Lua_get_table(L,".set");	/* get the .set table */
	lua_remove(L,4);	/* remove metatable */
	if (lua_istable(L,-1))
	{
		/* look for the key in the .set table */
		lua_pushvalue(L,2);  /* key */
		lua_rawget(L,-2);
		lua_remove(L,4);	/* remove .set */
		if (lua_iscfunction(L,-1))
		{	/* found it so call the fn & return its value */
			lua_pushvalue(L,3);  /* value */
			lua_call(L,1,0);
			return 0;
		}
		lua_pop(L,1);	/* remove the top */
	}
	lua_pop(L,1);	/* remove the .set */
    return 0;
}

/* registering a module in lua */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
	assert(lua_istable(L,-1));	/* just in case */
	lua_pushstring(L,name);
	lua_newtable(L);				/* the table */
	/* add meta table */
	lua_newtable(L);		/* the meta table */
	SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
	SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
	lua_pushstring(L,".get");
	lua_newtable(L);		/* the .get table */
	lua_rawset(L,-3);       /* add .get into metatable */
	lua_pushstring(L,".set");
	lua_newtable(L);		/* the .set table */
	lua_rawset(L,-3);       /* add .set into metatable */
	lua_setmetatable(L,-2);	/* sets meta table in module */
	lua_rawset(L,-3);                  /* add module into parent */
	SWIG_Lua_get_table(L,name);				/* get the table back out */
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
	lua_pop(L,1);                      /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
	assert(lua_istable(L,-1));	/* just in case */
	lua_getmetatable(L,-1);	/* get the metatable */
	assert(lua_istable(L,-1));	/* just in case */
	SWIG_Lua_get_table(L,".get"); /* find the .get table */
	assert(lua_istable(L,-1));	/* should be a table: */
	SWIG_Lua_add_function(L,name,getFn);
	lua_pop(L,1);                      /* tidy stack (remove table) */
	if (setFn)	/* if there is a set fn */
	{
		SWIG_Lua_get_table(L,".set"); /* find the .set table */
		assert(lua_istable(L,-1));	/* should be a table: */
		SWIG_Lua_add_function(L,name,setFn);
		lua_pop(L,1);                      /* tidy stack (remove table) */
	}
	lua_pop(L,1);                      /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
	SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*	there should be 2 params passed in
	(1) userdata (not the meta table)
	(2) string name of the attribute
*/
	assert(lua_isuserdata(L,-2));	/* just in case */
	lua_getmetatable(L,-2);		/* get the meta table */
	assert(lua_istable(L,-1));	/* just in case */
	SWIG_Lua_get_table(L,".get"); /* find the .get table */
	assert(lua_istable(L,-1));	/* just in case */
	/* look for the key in the .get table */
	lua_pushvalue(L,2);  /* key */
	lua_rawget(L,-2);
	lua_remove(L,-2); /* stack tidy, remove .get table */
	if (lua_iscfunction(L,-1))
	{	/* found it so call the fn & return its value */
		lua_pushvalue(L,1);  /* the userdata */
		lua_call(L,1,1);	/* 1 value in (userdata),1 out (result) */
		lua_remove(L,-2); /* stack tidy, remove metatable */
		return 1;
	}
	lua_pop(L,1);	/* remove whatever was there */
	/* ok, so try the .fn table */
	SWIG_Lua_get_table(L,".fn"); /* find the .get table */
	assert(lua_istable(L,-1));	/* just in case */
	lua_pushvalue(L,2);  /* key */
	lua_rawget(L,-2);	/* look for the fn */
	lua_remove(L,-2); /* stack tidy, remove .fn table */
	if (lua_iscfunction(L,-1))
	{	/* found it so return the fn & let lua call it */
		lua_remove(L,-2); /* stack tidy, remove metatable */
		return 1;
	}
	lua_pop(L,1);	/* remove whatever was there */
	/* NEW: looks for the __getitem() fn
	this is a user provided get fn */
	SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
	if (lua_iscfunction(L,-1))	/* if its there */
	{	/* found it so call the fn & return its value */
		lua_pushvalue(L,1);  /* the userdata */
		lua_pushvalue(L,2);  /* the parameter */
		lua_call(L,2,1);	/* 2 value in (userdata),1 out (result) */
		lua_remove(L,-2); /* stack tidy, remove metatable */
		return 1;
	}
	return 0;	/* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*	there should be 3 params passed in
	(1) table (not the meta table)
	(2) string name of the attribute
	(3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
			lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
			lua_tostring(L,2),
			lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

	assert(lua_isuserdata(L,1));	/* just in case */
	lua_getmetatable(L,1);		/* get the meta table */
	assert(lua_istable(L,-1));	/* just in case */

	SWIG_Lua_get_table(L,".set"); /* find the .set table */
	if (lua_istable(L,-1))
	{
		/* look for the key in the .set table */
		lua_pushvalue(L,2);  /* key */
		lua_rawget(L,-2);
		if (lua_iscfunction(L,-1))
		{	/* found it so call the fn & return its value */
			lua_pushvalue(L,1);  /* userdata */
			lua_pushvalue(L,3);  /* value */
			lua_call(L,2,0);
			return 0;
		}
		lua_pop(L,1);	/* remove the value */
	}
	lua_pop(L,1);	/* remove the value .set table */
	/* NEW: looks for the __setitem() fn
	this is a user provided set fn */
	SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
	if (lua_iscfunction(L,-1))	/* if its there */
	{	/* found it so call the fn & return its value */
		lua_pushvalue(L,1);  /* the userdata */
		lua_pushvalue(L,2);  /* the parameter */
		lua_pushvalue(L,3);  /* the value */
		lua_call(L,3,0);	/* 3 values in ,0 out */
		lua_remove(L,-2); /* stack tidy, remove metatable */
		return 1;
	}
	return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*	there should be 1 params passed in
	(1) userdata (not the meta table) */
	swig_lua_userdata* usr;
	swig_lua_class* clss;
	assert(lua_isuserdata(L,-1));	/* just in case */
	usr=(swig_lua_userdata*)lua_touserdata(L,-1);	/* get it */
	/* if must be destroyed & has a destructor */
	if (usr->own) /* if must be destroyed */
	{
		clss=(swig_lua_class*)usr->type->clientdata;	/* get the class */
		if (clss && clss->destructor)	/* there is a destroy fn */
		{
			clss->destructor(usr->ptr);	/* bye bye */
		}
	}
	return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
	/* add this all into the swig registry: */
	lua_pushstring(L,"SWIG");
	lua_rawget(L,LUA_REGISTRYINDEX);	/* get the registry */
	if (!lua_istable(L,-1))	/* not there */
	{	/* must be first time, so add it */
		lua_pop(L,1);	/* remove the result */
		lua_pushstring(L,"SWIG");
		lua_newtable(L);
		lua_rawset(L,LUA_REGISTRYINDEX);
		/* then get it */
		lua_pushstring(L,"SWIG");
		lua_rawget(L,LUA_REGISTRYINDEX);
	}
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
	SWIG_Lua_get_class_registry(L);	/* get the registry */
	lua_pushstring(L,cname);	/* get the name */
	lua_rawget(L,-2);		/* get it */
	lua_remove(L,-2);		/* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
	assert(lua_istable(L,-1));	/* just in case */
	SWIG_Lua_get_table(L,".get"); /* find the .get table */
	assert(lua_istable(L,-1));	/* just in case */
	SWIG_Lua_add_function(L,name,getFn);
	lua_pop(L,1);                      /* tidy stack (remove table) */
	if (setFn)
	{
		SWIG_Lua_get_table(L,".set"); /* find the .set table */
		assert(lua_istable(L,-1));	/* just in case */
		SWIG_Lua_add_function(L,name,setFn);
		lua_pop(L,1);                      /* tidy stack (remove table) */
	}
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
	int i;
	/* call all the base classes first: we can then override these later: */
	for(i=0;clss->bases[i];i++)
	{
		SWIG_Lua_add_class_details(L,clss->bases[i]);
	}
	/* add fns */
	for(i=0;clss->attributes[i].name;i++){
		SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
	}
	/* add methods to the metatable */
	SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
	assert(lua_istable(L,-1));	/* just in case */
	for(i=0;clss->methods[i].name;i++){
		SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
	}
	lua_pop(L,1);                      /* tidy stack (remove table) */
	/* 	add operator overloads
		these look ANY method which start with "__" and assume they
		are operator overloads & add them to the metatable
		(this might mess up is someone defines a method __gc (the destructor)*/
	for(i=0;clss->methods[i].name;i++){
		if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
			SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
		}
	}
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
/*	add its constructor to module with the name of the class
	so you can do MyClass(...) as well as new_MyClass(...)
	BUT only if a constructor is defined
	(this overcomes the problem of pure virtual classes without constructors)*/
	if (clss->constructor)
		SWIG_Lua_add_function(L,clss->name,clss->constructor);

	SWIG_Lua_get_class_registry(L);	/* get the registry */
	lua_pushstring(L,clss->name);	/* get the name */
	lua_newtable(L);		/* create the metatable */
	/* add string of class name called ".type" */
	lua_pushstring(L,".type");
	lua_pushstring(L,clss->name);
	lua_rawset(L,-3);
	/* add a table called ".get" */
	lua_pushstring(L,".get");
	lua_newtable(L);
	lua_rawset(L,-3);
	/* add a table called ".set" */
	lua_pushstring(L,".set");
	lua_newtable(L);
	lua_rawset(L,-3);
	/* add a table called ".fn" */
	lua_pushstring(L,".fn");
	lua_newtable(L);
	lua_rawset(L,-3);
	/* add accessor fns for using the .get,.set&.fn */
	SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
	SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
	SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
	/* add it */
	lua_rawset(L,-3);	/* metatable into registry */
	lua_pop(L,1);           /* tidy stack (remove registry) */

	SWIG_Lua_get_class_metatable(L,clss->name);
	SWIG_Lua_add_class_details(L,clss);	/* recursive adding of details (atts & ops) */
	lua_pop(L,1);           /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
	swig_lua_userdata* usr;
	if (!ptr){
		lua_pushnil(L);
		return;
	}
	usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));	/* get data */
	usr->ptr=ptr;	/* set the ptr */
	usr->type=type;
	usr->own=own;
	if (type->clientdata)	/* there is clientdata: so add the metatable */
	{
		SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
		if (lua_istable(L,-1))
		{
			lua_setmetatable(L,-2);
		}
		else
		{
			lua_pop(L,1);
		}
	}
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
	swig_lua_userdata* usr;
	swig_cast_info *cast;
	usr=(swig_lua_userdata*)lua_touserdata(L,index);	/* get data */
	if (usr)
	{
		cast=SWIG_TypeCheckStruct(usr->type,type);
		if (cast)
		{
			*ptr=SWIG_TypeCast(cast,usr->ptr);
			return 0;	/* ok */
		}
	}
	return 1;	/* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
						int argnum,const char* func_name){
	void* result;
	if (SWIG_ConvertPtr(L,index,&result,type,flags)){
		lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
			func_name,(type && type->str)?type->str:"void*",argnum);
		lua_error(L);
	}
	return result;
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
	swig_lua_userdata* usr;
	if (!lua_isuserdata(L,1))	/* just in case */
		return 0;	/* nil reply */
	usr=(swig_lua_userdata*)lua_touserdata(L,1);	/* get data */
	lua_pushstring(L,usr->type->name);
	return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
	int result;
	swig_lua_userdata *usr1,*usr2;
	if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))	/* just in case */
		return 0;	/* nil reply */
	usr1=(swig_lua_userdata*)lua_touserdata(L,1);	/* get data */
	usr2=(swig_lua_userdata*)lua_touserdata(L,2);	/* get data */
	result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type);
	lua_pushboolean(L,result);
	return 1;
}


/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(double)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(double)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
    /* TODO?? */
/*      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype)); */
      break;
    default:
      break;
    }
  }
}

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
  	ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);	/* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_gboolean swig_types[0]
#define SWIGTYPE_gint swig_types[1]
#define SWIGTYPE_gpointer swig_types[2]
#define SWIGTYPE_guint swig_types[3]
#define SWIGTYPE_gulong swig_types[4]
#define SWIGTYPE_itemSetPtr swig_types[5]
#define SWIGTYPE_p_GHashTable swig_types[6]
#define SWIGTYPE_p_GList swig_types[7]
#define SWIGTYPE_p_GSList swig_types[8]
#define SWIGTYPE_p_GtkToggleAction swig_types[9]
#define SWIGTYPE_p_GtkWidget swig_types[10]
#define SWIGTYPE_p_f_p_struct_node__p_char swig_types[11]
#define SWIGTYPE_p_f_p_struct_node__void swig_types[12]
#define SWIGTYPE_p_f_p_struct_node_guint__void swig_types[13]
#define SWIGTYPE_p_gboolean swig_types[14]
#define SWIGTYPE_p_gint swig_types[15]
#define SWIGTYPE_p_gpointer swig_types[16]
#define SWIGTYPE_p_guint swig_types[17]
#define SWIGTYPE_p_gulong swig_types[18]
#define SWIGTYPE_p_item swig_types[19]
#define SWIGTYPE_p_itemSet swig_types[20]
#define SWIGTYPE_p_itemSetPtr swig_types[21]
#define SWIGTYPE_p_node swig_types[22]
#define SWIGTYPE_p_nodeSource swig_types[23]
#define SWIGTYPE_p_nodeType swig_types[24]
#define SWIGTYPE_p_request swig_types[25]
#define SWIGTYPE_p_time_t swig_types[26]
#define SWIGTYPE_p_vfolderPtr swig_types[27]
#define SWIGTYPE_p_xmlNodePtr swig_types[28]
#define SWIGTYPE_time_t swig_types[29]
#define SWIGTYPE_vfolderPtr swig_types[30]
#define SWIGTYPE_xmlNodePtr swig_types[31]
static swig_type_info *swig_types[33];
static swig_module_info swig_module = {swig_types, 32, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Liferea_Init
#define SWIG_name    "liferea"
#define SWIG_import  luaopen_liferea


#include "../node.h"
#include "../feed.h"
#include "../item.h"
#include "../itemlist.h" 

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_node_data_set(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  gpointer arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_data_set");
  {
    gpointer * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gpointer,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->data = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_data_get(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  gpointer result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_data_get");
  result =  ((arg1)->data);
  SWIG_arg=0;
  {
    gpointer * resultptr;
    resultptr = (gpointer *) malloc(sizeof(gpointer));
    memmove(resultptr, &result, sizeof(gpointer));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gpointer,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_type_set(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  guint arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_type_set");
  {
    guint * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_guint,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->type = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_type_get(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  guint result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_type_get");
  result =  ((arg1)->type);
  SWIG_arg=0;
  {
    guint * resultptr;
    resultptr = (guint *) malloc(sizeof(guint));
    memmove(resultptr, &result, sizeof(guint));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_guint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_nodeType_set(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  struct nodeType *arg2 = (struct nodeType *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_nodeType_set");
  arg2=(struct nodeType *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_nodeType,0,2,"node_nodeType_set");
  if (arg1) (arg1)->nodeType = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_nodeType_get(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  struct nodeType *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_nodeType_get");
  result = (struct nodeType *) ((arg1)->nodeType);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_nodeType,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_source_set(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  struct nodeSource *arg2 = (struct nodeSource *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_source_set");
  arg2=(struct nodeSource *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_nodeSource,0,2,"node_source_set");
  if (arg1) (arg1)->source = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_source_get(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  struct nodeSource *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_source_get");
  result = (struct nodeSource *) ((arg1)->source);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_nodeSource,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_updateRequest_set(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  struct request *arg2 = (struct request *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_updateRequest_set");
  arg2=(struct request *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_request,0,2,"node_updateRequest_set");
  if (arg1) (arg1)->updateRequest = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_updateRequest_get(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  struct request *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_updateRequest_get");
  result = (struct request *) ((arg1)->updateRequest);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_request,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_iconFile_set(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_iconFile_set");
  arg2 = (char*)lua_tostring(L, 2);
  {
    if (arg1->iconFile) free((char*)arg1->iconFile);
    if (arg2) {
      arg1->iconFile = (char *) malloc(strlen(arg2)+1);
      strcpy((char*)arg1->iconFile,arg2);
    } else {
      arg1->iconFile = 0;
    }
  }
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_iconFile_get(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_iconFile_get");
  result = (char *) ((arg1)->iconFile);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_parent_set(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  struct node *arg2 = (struct node *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_parent_set");
  arg2=(struct node *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_node,0,2,"node_parent_set");
  if (arg1) (arg1)->parent = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_parent_get(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  struct node *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_parent_get");
  result = (struct node *) ((arg1)->parent);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_node,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_children_set(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  GSList *arg2 = (GSList *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_children_set");
  arg2=(GSList *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_GSList,0,2,"node_children_set");
  if (arg1) (arg1)->children = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_children_get(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  GSList *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_children_get");
  result = (GSList *) ((arg1)->children);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GSList,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_id_set(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_id_set");
  arg2 = (char*)lua_tostring(L, 2);
  {
    if (arg1->id) free((char*)arg1->id);
    if (arg2) {
      arg1->id = (char *) malloc(strlen(arg2)+1);
      strcpy((char*)arg1->id,arg2);
    } else {
      arg1->id = 0;
    }
  }
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_id_get(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_id_get");
  result = (char *) ((arg1)->id);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_unreadCount_set(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  guint arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_unreadCount_set");
  {
    guint * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_guint,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->unreadCount = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_unreadCount_get(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  guint result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_unreadCount_get");
  result =  ((arg1)->unreadCount);
  SWIG_arg=0;
  {
    guint * resultptr;
    resultptr = (guint *) malloc(sizeof(guint));
    memmove(resultptr, &result, sizeof(guint));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_guint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_popupCount_set(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  guint arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_popupCount_set");
  {
    guint * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_guint,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->popupCount = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_popupCount_get(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  guint result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_popupCount_get");
  result =  ((arg1)->popupCount);
  SWIG_arg=0;
  {
    guint * resultptr;
    resultptr = (guint *) malloc(sizeof(guint));
    memmove(resultptr, &result, sizeof(guint));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_guint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_newCount_set(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  guint arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_newCount_set");
  {
    guint * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_guint,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->newCount = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_newCount_get(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  guint result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_newCount_get");
  result =  ((arg1)->newCount);
  SWIG_arg=0;
  {
    guint * resultptr;
    resultptr = (guint *) malloc(sizeof(guint));
    memmove(resultptr, &result, sizeof(guint));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_guint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_title_set(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_title_set");
  arg2 = (char*)lua_tostring(L, 2);
  {
    if (arg1->title) free((char*)arg1->title);
    if (arg2) {
      arg1->title = (char *) malloc(strlen(arg2)+1);
      strcpy((char*)arg1->title,arg2);
    } else {
      arg1->title = 0;
    }
  }
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_title_get(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_title_get");
  result = (char *) ((arg1)->title);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_icon_set(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  gpointer arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_icon_set");
  {
    gpointer * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gpointer,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->icon = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_icon_get(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  gpointer result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_icon_get");
  result =  ((arg1)->icon);
  SWIG_arg=0;
  {
    gpointer * resultptr;
    resultptr = (gpointer *) malloc(sizeof(gpointer));
    memmove(resultptr, &result, sizeof(gpointer));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gpointer,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_loaded_set(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  guint arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_loaded_set");
  {
    guint * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_guint,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->loaded = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_loaded_get(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  guint result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_loaded_get");
  result =  ((arg1)->loaded);
  SWIG_arg=0;
  {
    guint * resultptr;
    resultptr = (guint *) malloc(sizeof(guint));
    memmove(resultptr, &result, sizeof(guint));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_guint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_available_set(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  gboolean arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_available_set");
  {
    gboolean * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gboolean,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->available = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_available_get(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  gboolean result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_available_get");
  result =  ((arg1)->available);
  SWIG_arg=0;
  {
    gboolean * resultptr;
    resultptr = (gboolean *) malloc(sizeof(gboolean));
    memmove(resultptr, &result, sizeof(gboolean));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gboolean,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_needsCacheSave_set(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  gboolean arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_needsCacheSave_set");
  {
    gboolean * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gboolean,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->needsCacheSave = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_needsCacheSave_get(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  gboolean result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_needsCacheSave_get");
  result =  ((arg1)->needsCacheSave);
  SWIG_arg=0;
  {
    gboolean * resultptr;
    resultptr = (gboolean *) malloc(sizeof(gboolean));
    memmove(resultptr, &result, sizeof(gboolean));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gboolean,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_itemSet_set(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  itemSetPtr arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_itemSet_set");
  {
    itemSetPtr * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_itemSetPtr,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->itemSet = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_itemSet_get(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  itemSetPtr result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_itemSet_get");
  result =  ((arg1)->itemSet);
  SWIG_arg=0;
  {
    itemSetPtr * resultptr;
    resultptr = (itemSetPtr *) malloc(sizeof(itemSetPtr));
    memmove(resultptr, &result, sizeof(itemSetPtr));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_itemSetPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_twoPane_set(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  gboolean arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_twoPane_set");
  {
    gboolean * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gboolean,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->twoPane = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_twoPane_get(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  gboolean result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_twoPane_get");
  result =  ((arg1)->twoPane);
  SWIG_arg=0;
  {
    gboolean * resultptr;
    resultptr = (gboolean *) malloc(sizeof(gboolean));
    memmove(resultptr, &result, sizeof(gboolean));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gboolean,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_sortColumn_set(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  gint arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_sortColumn_set");
  {
    gint * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gint,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->sortColumn = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_sortColumn_get(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  gint result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_sortColumn_get");
  result =  ((arg1)->sortColumn);
  SWIG_arg=0;
  {
    gint * resultptr;
    resultptr = (gint *) malloc(sizeof(gint));
    memmove(resultptr, &result, sizeof(gint));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_sortReversed_set(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  gboolean arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_sortReversed_set");
  {
    gboolean * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gboolean,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->sortReversed = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_sortReversed_get(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  gboolean result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_sortReversed_get");
  result =  ((arg1)->sortReversed);
  SWIG_arg=0;
  {
    gboolean * resultptr;
    resultptr = (gboolean *) malloc(sizeof(gboolean));
    memmove(resultptr, &result, sizeof(gboolean));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gboolean,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_node(lua_State* L) {
  int SWIG_arg = -1;
  struct node *result = 0 ;
  
  result = (struct node *)(struct node *) calloc(1, sizeof(struct node));
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_node,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_node(lua_State* L) {
  int SWIG_arg = -1;
  struct node *arg1 = (struct node *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct node *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"delete_node");
  free((char *) arg1);
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_node(void *obj) {
struct node *arg1 = (struct node *) obj;
free((char *) arg1);
}
static swig_lua_method swig_node_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_node_attributes[] = {
    { "data",_wrap_node_data_get, _wrap_node_data_set},
    { "type",_wrap_node_type_get, _wrap_node_type_set},
    { "nodeType",_wrap_node_nodeType_get, _wrap_node_nodeType_set},
    { "source",_wrap_node_source_get, _wrap_node_source_set},
    { "updateRequest",_wrap_node_updateRequest_get, _wrap_node_updateRequest_set},
    { "iconFile",_wrap_node_iconFile_get, _wrap_node_iconFile_set},
    { "parent",_wrap_node_parent_get, _wrap_node_parent_set},
    { "children",_wrap_node_children_get, _wrap_node_children_set},
    { "id",_wrap_node_id_get, _wrap_node_id_set},
    { "unreadCount",_wrap_node_unreadCount_get, _wrap_node_unreadCount_set},
    { "popupCount",_wrap_node_popupCount_get, _wrap_node_popupCount_set},
    { "newCount",_wrap_node_newCount_get, _wrap_node_newCount_set},
    { "title",_wrap_node_title_get, _wrap_node_title_set},
    { "icon",_wrap_node_icon_get, _wrap_node_icon_set},
    { "loaded",_wrap_node_loaded_get, _wrap_node_loaded_set},
    { "available",_wrap_node_available_get, _wrap_node_available_set},
    { "needsCacheSave",_wrap_node_needsCacheSave_get, _wrap_node_needsCacheSave_set},
    { "itemSet",_wrap_node_itemSet_get, _wrap_node_itemSet_set},
    { "twoPane",_wrap_node_twoPane_get, _wrap_node_twoPane_set},
    { "sortColumn",_wrap_node_sortColumn_get, _wrap_node_sortColumn_set},
    { "sortReversed",_wrap_node_sortReversed_get, _wrap_node_sortReversed_set},
    {0,0,0}
};
static swig_lua_class *swig_node_bases[] = {0};
swig_lua_class _wrap_class_node = { "node", &SWIGTYPE_p_node,_wrap_new_node, swig_delete_node, swig_node_methods, swig_node_attributes, swig_node_bases };

static int _wrap_nodeType_capabilities_set(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  gulong arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_capabilities_set");
  {
    gulong * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gulong,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->capabilities = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodeType_capabilities_get(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  gulong result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_capabilities_get");
  result =  ((arg1)->capabilities);
  SWIG_arg=0;
  {
    gulong * resultptr;
    resultptr = (gulong *) malloc(sizeof(gulong));
    memmove(resultptr, &result, sizeof(gulong));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gulong,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodeType_initial_load_set(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  void (*arg2)(nodePtr) = (void (*)(nodePtr)) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_initial_load_set");
  arg2=(void (*)(nodePtr))SWIG_MustGetPtr(L,2,SWIGTYPE_p_f_p_struct_node__void,0,2,"nodeType_initial_load_set");
  if (arg1) (arg1)->initial_load = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodeType_initial_load_get(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  void (*result)(nodePtr) = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_initial_load_get");
  result = (void (*)(nodePtr)) ((arg1)->initial_load);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_struct_node__void,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodeType_load_set(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  void (*arg2)(nodePtr) = (void (*)(nodePtr)) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_load_set");
  arg2=(void (*)(nodePtr))SWIG_MustGetPtr(L,2,SWIGTYPE_p_f_p_struct_node__void,0,2,"nodeType_load_set");
  if (arg1) (arg1)->load = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodeType_load_get(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  void (*result)(nodePtr) = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_load_get");
  result = (void (*)(nodePtr)) ((arg1)->load);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_struct_node__void,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodeType_save_set(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  void (*arg2)(nodePtr) = (void (*)(nodePtr)) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_save_set");
  arg2=(void (*)(nodePtr))SWIG_MustGetPtr(L,2,SWIGTYPE_p_f_p_struct_node__void,0,2,"nodeType_save_set");
  if (arg1) (arg1)->save = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodeType_save_get(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  void (*result)(nodePtr) = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_save_get");
  result = (void (*)(nodePtr)) ((arg1)->save);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_struct_node__void,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodeType_unload_set(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  void (*arg2)(nodePtr) = (void (*)(nodePtr)) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_unload_set");
  arg2=(void (*)(nodePtr))SWIG_MustGetPtr(L,2,SWIGTYPE_p_f_p_struct_node__void,0,2,"nodeType_unload_set");
  if (arg1) (arg1)->unload = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodeType_unload_get(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  void (*result)(nodePtr) = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_unload_get");
  result = (void (*)(nodePtr)) ((arg1)->unload);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_struct_node__void,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodeType_reset_update_counter_set(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  void (*arg2)(nodePtr) = (void (*)(nodePtr)) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_reset_update_counter_set");
  arg2=(void (*)(nodePtr))SWIG_MustGetPtr(L,2,SWIGTYPE_p_f_p_struct_node__void,0,2,"nodeType_reset_update_counter_set");
  if (arg1) (arg1)->reset_update_counter = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodeType_reset_update_counter_get(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  void (*result)(nodePtr) = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_reset_update_counter_get");
  result = (void (*)(nodePtr)) ((arg1)->reset_update_counter);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_struct_node__void,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodeType_request_update_set(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  void (*arg2)(nodePtr,guint) = (void (*)(nodePtr,guint)) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_request_update_set");
  arg2=(void (*)(nodePtr,guint))SWIG_MustGetPtr(L,2,SWIGTYPE_p_f_p_struct_node_guint__void,0,2,"nodeType_request_update_set");
  if (arg1) (arg1)->request_update = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodeType_request_update_get(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  void (*result)(nodePtr,guint) = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_request_update_get");
  result = (void (*)(nodePtr,guint)) ((arg1)->request_update);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_struct_node_guint__void,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodeType_request_auto_update_set(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  void (*arg2)(nodePtr) = (void (*)(nodePtr)) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_request_auto_update_set");
  arg2=(void (*)(nodePtr))SWIG_MustGetPtr(L,2,SWIGTYPE_p_f_p_struct_node__void,0,2,"nodeType_request_auto_update_set");
  if (arg1) (arg1)->request_auto_update = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodeType_request_auto_update_get(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  void (*result)(nodePtr) = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_request_auto_update_get");
  result = (void (*)(nodePtr)) ((arg1)->request_auto_update);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_struct_node__void,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodeType_remove_set(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  void (*arg2)(nodePtr) = (void (*)(nodePtr)) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_remove_set");
  arg2=(void (*)(nodePtr))SWIG_MustGetPtr(L,2,SWIGTYPE_p_f_p_struct_node__void,0,2,"nodeType_remove_set");
  if (arg1) (arg1)->remove = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodeType_remove_get(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  void (*result)(nodePtr) = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_remove_get");
  result = (void (*)(nodePtr)) ((arg1)->remove);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_struct_node__void,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodeType_mark_all_read_set(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  void (*arg2)(nodePtr) = (void (*)(nodePtr)) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_mark_all_read_set");
  arg2=(void (*)(nodePtr))SWIG_MustGetPtr(L,2,SWIGTYPE_p_f_p_struct_node__void,0,2,"nodeType_mark_all_read_set");
  if (arg1) (arg1)->mark_all_read = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodeType_mark_all_read_get(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  void (*result)(nodePtr) = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_mark_all_read_get");
  result = (void (*)(nodePtr)) ((arg1)->mark_all_read);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_struct_node__void,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodeType_render_set(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  char *(*arg2)(nodePtr) = (char *(*)(nodePtr)) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_render_set");
  arg2=(char *(*)(nodePtr))SWIG_MustGetPtr(L,2,SWIGTYPE_p_f_p_struct_node__p_char,0,2,"nodeType_render_set");
  if (arg1) (arg1)->render = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodeType_render_get(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  char *(*result)(nodePtr) = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_render_get");
  result = (char *(*)(nodePtr)) ((arg1)->render);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_struct_node__p_char,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodeType_request_add_set(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  void (*arg2)(nodePtr) = (void (*)(nodePtr)) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_request_add_set");
  arg2=(void (*)(nodePtr))SWIG_MustGetPtr(L,2,SWIGTYPE_p_f_p_struct_node__void,0,2,"nodeType_request_add_set");
  if (arg1) (arg1)->request_add = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodeType_request_add_get(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  void (*result)(nodePtr) = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_request_add_get");
  result = (void (*)(nodePtr)) ((arg1)->request_add);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_struct_node__void,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodeType_request_properties_set(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  void (*arg2)(nodePtr) = (void (*)(nodePtr)) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_request_properties_set");
  arg2=(void (*)(nodePtr))SWIG_MustGetPtr(L,2,SWIGTYPE_p_f_p_struct_node__void,0,2,"nodeType_request_properties_set");
  if (arg1) (arg1)->request_properties = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nodeType_request_properties_get(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  void (*result)(nodePtr) = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"nodeType_request_properties_get");
  result = (void (*)(nodePtr)) ((arg1)->request_properties);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_struct_node__void,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_nodeType(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *result = 0 ;
  
  result = (struct nodeType *)(struct nodeType *) calloc(1, sizeof(struct nodeType));
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_nodeType,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_nodeType(lua_State* L) {
  int SWIG_arg = -1;
  struct nodeType *arg1 = (struct nodeType *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct nodeType *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"delete_nodeType");
  free((char *) arg1);
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_nodeType(void *obj) {
struct nodeType *arg1 = (struct nodeType *) obj;
free((char *) arg1);
}
static swig_lua_method swig_nodeType_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_nodeType_attributes[] = {
    { "capabilities",_wrap_nodeType_capabilities_get, _wrap_nodeType_capabilities_set},
    { "initial_load",_wrap_nodeType_initial_load_get, _wrap_nodeType_initial_load_set},
    { "load",_wrap_nodeType_load_get, _wrap_nodeType_load_set},
    { "save",_wrap_nodeType_save_get, _wrap_nodeType_save_set},
    { "unload",_wrap_nodeType_unload_get, _wrap_nodeType_unload_set},
    { "reset_update_counter",_wrap_nodeType_reset_update_counter_get, _wrap_nodeType_reset_update_counter_set},
    { "request_update",_wrap_nodeType_request_update_get, _wrap_nodeType_request_update_set},
    { "request_auto_update",_wrap_nodeType_request_auto_update_get, _wrap_nodeType_request_auto_update_set},
    { "remove",_wrap_nodeType_remove_get, _wrap_nodeType_remove_set},
    { "mark_all_read",_wrap_nodeType_mark_all_read_get, _wrap_nodeType_mark_all_read_set},
    { "render",_wrap_nodeType_render_get, _wrap_nodeType_render_set},
    { "request_add",_wrap_nodeType_request_add_get, _wrap_nodeType_request_add_set},
    { "request_properties",_wrap_nodeType_request_properties_get, _wrap_nodeType_request_properties_set},
    {0,0,0}
};
static swig_lua_class *swig_nodeType_bases[] = {0};
swig_lua_class _wrap_class_nodeType = { "nodeType", &SWIGTYPE_p_nodeType,_wrap_new_nodeType, swig_delete_nodeType, swig_nodeType_methods, swig_nodeType_attributes, swig_nodeType_bases };

static int _wrap_node_type_register(lua_State* L) {
  int SWIG_arg = -1;
  nodeTypePtr arg1 = (nodeTypePtr) 0 ;
  guint arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(nodeTypePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_nodeType,0,1,"node_type_register");
  {
    guint * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_guint,0)) SWIG_fail;
    arg2 = *argp;
  }
  node_type_register(arg1,arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_new(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr result;
  
  result = (nodePtr)node_new();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_node,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_add_child(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  nodePtr arg2 = (nodePtr) 0 ;
  gint arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isuserdata(L,3)) SWIG_fail_arg(3);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_add_child");
  arg2=(nodePtr)SWIG_MustGetPtr(L,2,SWIGTYPE_p_node,0,2,"node_add_child");
  {
    gint * argp;
    if(SWIG_ConvertPtr(L,3,(void**)(&argp),SWIGTYPE_p_gint,0)) SWIG_fail;
    arg3 = *argp;
  }
  node_add_child(arg1,arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_request_interactive_add(lua_State* L) {
  int SWIG_arg = -1;
  guint arg1 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  {
    guint * argp;
    if(SWIG_ConvertPtr(L,1,(void**)(&argp),SWIGTYPE_p_guint,0)) SWIG_fail;
    arg1 = *argp;
  }
  node_request_interactive_add(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_request_automatic_add(lua_State* L) {
  int SWIG_arg = -1;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  gint arg4 ;
  
  if(!lua_isstring(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  if(!lua_isstring(L,3)) SWIG_fail_arg(3);
  if(!lua_isuserdata(L,4)) SWIG_fail_arg(4);
  arg1 = (char*)lua_tostring(L, 1);
  arg2 = (char*)lua_tostring(L, 2);
  arg3 = (char*)lua_tostring(L, 3);
  {
    gint * argp;
    if(SWIG_ConvertPtr(L,4,(void**)(&argp),SWIGTYPE_p_gint,0)) SWIG_fail;
    arg4 = *argp;
  }
  node_request_automatic_add((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_request_remove(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_request_remove");
  node_request_remove(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_add_data(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  guint arg2 ;
  gpointer arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isuserdata(L,3)) SWIG_fail_arg(3);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_add_data");
  {
    guint * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_guint,0)) SWIG_fail;
    arg2 = *argp;
  }
  {
    gpointer * argp;
    if(SWIG_ConvertPtr(L,3,(void**)(&argp),SWIGTYPE_p_gpointer,0)) SWIG_fail;
    arg3 = *argp;
  }
  node_add_data(arg1,arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_is_ancestor(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  nodePtr arg2 = (nodePtr) 0 ;
  gboolean result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_is_ancestor");
  arg2=(nodePtr)SWIG_MustGetPtr(L,2,SWIGTYPE_p_node,0,2,"node_is_ancestor");
  result = node_is_ancestor(arg1,arg2);
  SWIG_arg=0;
  {
    gboolean * resultptr;
    resultptr = (gboolean *) malloc(sizeof(gboolean));
    memmove(resultptr, &result, sizeof(gboolean));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gboolean,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_get_title(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_get_title");
  result = (char *)node_get_title(arg1);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_set_title(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_set_title");
  arg2 = (char*)lua_tostring(L, 2);
  node_set_title(arg1,(char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_get_unread_count(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  guint result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_get_unread_count");
  result = node_get_unread_count(arg1);
  SWIG_arg=0;
  {
    guint * resultptr;
    resultptr = (guint *) malloc(sizeof(guint));
    memmove(resultptr, &result, sizeof(guint));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_guint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_update_unread_count(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  gint arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_update_unread_count");
  {
    gint * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gint,0)) SWIG_fail;
    arg2 = *argp;
  }
  node_update_unread_count(arg1,arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_update_new_count(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  gint arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_update_new_count");
  {
    gint * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gint,0)) SWIG_fail;
    arg2 = *argp;
  }
  node_update_new_count(arg1,arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_mark_all_read(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_mark_all_read");
  node_mark_all_read(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_set_icon(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  gpointer arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_set_icon");
  {
    gpointer * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gpointer,0)) SWIG_fail;
    arg2 = *argp;
  }
  node_set_icon(arg1,arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_get_icon(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  gpointer result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_get_icon");
  result = node_get_icon(arg1);
  SWIG_arg=0;
  {
    gpointer * resultptr;
    resultptr = (gpointer *) malloc(sizeof(gpointer));
    memmove(resultptr, &result, sizeof(gpointer));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gpointer,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_get_favicon_file(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_get_favicon_file");
  result = (char *)node_get_favicon_file(arg1);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_new_id(lua_State* L) {
  int SWIG_arg = -1;
  char *result = 0 ;
  
  result = (char *)node_new_id();
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_get_id(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_get_id");
  result = (char *)node_get_id(arg1);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_set_id(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_set_id");
  arg2 = (char*)lua_tostring(L, 2);
  node_set_id(arg1,(char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_type_to_str(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_type_to_str");
  result = (char *)node_type_to_str(arg1);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_str_to_type(lua_State* L) {
  int SWIG_arg = -1;
  char *arg1 = (char *) 0 ;
  guint result;
  
  if(!lua_isstring(L,1)) SWIG_fail_arg(1);
  arg1 = (char*)lua_tostring(L, 1);
  result = node_str_to_type((char const *)arg1);
  SWIG_arg=0;
  {
    guint * resultptr;
    resultptr = (guint *) malloc(sizeof(guint));
    memmove(resultptr, &result, sizeof(guint));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_guint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_free(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_free");
  node_free(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_update_counters(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_update_counters");
  node_update_counters(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_initial_load(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_initial_load");
  node_initial_load(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_load(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_load");
  node_load(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_save(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_save");
  node_save(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_unload(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_unload");
  node_unload(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_remove(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_remove");
  node_remove(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_reset_update_counter(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_reset_update_counter");
  node_reset_update_counter(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_merge_items(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  GList *arg2 = (GList *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_merge_items");
  arg2=(GList *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_GList,0,2,"node_merge_items");
  node_merge_items(arg1,arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_get_itemset(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  itemSetPtr result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_get_itemset");
  result = node_get_itemset(arg1);
  SWIG_arg=0;
  {
    itemSetPtr * resultptr;
    resultptr = (itemSetPtr *) malloc(sizeof(itemSetPtr));
    memmove(resultptr, &result, sizeof(itemSetPtr));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_itemSetPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_set_itemset(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  itemSetPtr arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_set_itemset");
  {
    itemSetPtr * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_itemSetPtr,0)) SWIG_fail;
    arg2 = *argp;
  }
  node_set_itemset(arg1,arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_render(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_render");
  result = (char *)node_render(arg1);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_request_auto_update(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_request_auto_update");
  node_request_auto_update(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_request_update(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  guint arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_request_update");
  {
    guint * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_guint,0)) SWIG_fail;
    arg2 = *argp;
  }
  node_request_update(arg1,arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_request_properties(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_request_properties");
  node_request_properties(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_update_favicon(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_update_favicon");
  node_update_favicon(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_set_sort_column(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  gint arg2 ;
  gboolean arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isuserdata(L,3)) SWIG_fail_arg(3);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_set_sort_column");
  {
    gint * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gint,0)) SWIG_fail;
    arg2 = *argp;
  }
  {
    gboolean * argp;
    if(SWIG_ConvertPtr(L,3,(void**)(&argp),SWIGTYPE_p_gboolean,0)) SWIG_fail;
    arg3 = *argp;
  }
  node_set_sort_column(arg1,arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_set_two_pane_mode(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  gboolean arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_set_two_pane_mode");
  {
    gboolean * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gboolean,0)) SWIG_fail;
    arg2 = *argp;
  }
  node_set_two_pane_mode(arg1,arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_get_two_pane_mode(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  gboolean result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_get_two_pane_mode");
  result = node_get_two_pane_mode(arg1);
  SWIG_arg=0;
  {
    gboolean * resultptr;
    resultptr = (gboolean *) malloc(sizeof(gboolean));
    memmove(resultptr, &result, sizeof(gboolean));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gboolean,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_node_foreach_child_full(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  gpointer arg2 ;
  gint arg3 ;
  gpointer arg4 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isuserdata(L,3)) SWIG_fail_arg(3);
  if(!lua_isuserdata(L,4)) SWIG_fail_arg(4);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"node_foreach_child_full");
  {
    gpointer * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gpointer,0)) SWIG_fail;
    arg2 = *argp;
  }
  {
    gint * argp;
    if(SWIG_ConvertPtr(L,3,(void**)(&argp),SWIGTYPE_p_gint,0)) SWIG_fail;
    arg3 = *argp;
  }
  {
    gpointer * argp;
    if(SWIG_ConvertPtr(L,4,(void**)(&argp),SWIGTYPE_p_gpointer,0)) SWIG_fail;
    arg4 = *argp;
  }
  node_foreach_child_full(arg1,arg2,arg3,arg4);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_readStatus_set(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  gboolean arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_readStatus_set");
  {
    gboolean * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gboolean,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->readStatus = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_readStatus_get(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  gboolean result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_readStatus_get");
  result =  ((arg1)->readStatus);
  SWIG_arg=0;
  {
    gboolean * resultptr;
    resultptr = (gboolean *) malloc(sizeof(gboolean));
    memmove(resultptr, &result, sizeof(gboolean));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gboolean,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_newStatus_set(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  gboolean arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_newStatus_set");
  {
    gboolean * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gboolean,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->newStatus = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_newStatus_get(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  gboolean result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_newStatus_get");
  result =  ((arg1)->newStatus);
  SWIG_arg=0;
  {
    gboolean * resultptr;
    resultptr = (gboolean *) malloc(sizeof(gboolean));
    memmove(resultptr, &result, sizeof(gboolean));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gboolean,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_popupStatus_set(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  gboolean arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_popupStatus_set");
  {
    gboolean * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gboolean,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->popupStatus = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_popupStatus_get(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  gboolean result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_popupStatus_get");
  result =  ((arg1)->popupStatus);
  SWIG_arg=0;
  {
    gboolean * resultptr;
    resultptr = (gboolean *) malloc(sizeof(gboolean));
    memmove(resultptr, &result, sizeof(gboolean));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gboolean,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_updateStatus_set(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  gboolean arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_updateStatus_set");
  {
    gboolean * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gboolean,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->updateStatus = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_updateStatus_get(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  gboolean result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_updateStatus_get");
  result =  ((arg1)->updateStatus);
  SWIG_arg=0;
  {
    gboolean * resultptr;
    resultptr = (gboolean *) malloc(sizeof(gboolean));
    memmove(resultptr, &result, sizeof(gboolean));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gboolean,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_flagStatus_set(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  gboolean arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_flagStatus_set");
  {
    gboolean * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gboolean,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->flagStatus = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_flagStatus_get(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  gboolean result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_flagStatus_get");
  result =  ((arg1)->flagStatus);
  SWIG_arg=0;
  {
    gboolean * resultptr;
    resultptr = (gboolean *) malloc(sizeof(gboolean));
    memmove(resultptr, &result, sizeof(gboolean));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gboolean,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_hasEnclosure_set(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  gboolean arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_hasEnclosure_set");
  {
    gboolean * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gboolean,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->hasEnclosure = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_hasEnclosure_get(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  gboolean result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_hasEnclosure_get");
  result =  ((arg1)->hasEnclosure);
  SWIG_arg=0;
  {
    gboolean * resultptr;
    resultptr = (gboolean *) malloc(sizeof(gboolean));
    memmove(resultptr, &result, sizeof(gboolean));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gboolean,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_title_set(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_title_set");
  arg2 = (char*)lua_tostring(L, 2);
  {
    if (arg1->title) free((char*)arg1->title);
    if (arg2) {
      arg1->title = (char *) malloc(strlen(arg2)+1);
      strcpy((char*)arg1->title,arg2);
    } else {
      arg1->title = 0;
    }
  }
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_title_get(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_title_get");
  result = (char *) ((arg1)->title);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_source_set(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_source_set");
  arg2 = (char*)lua_tostring(L, 2);
  {
    if (arg1->source) free((char*)arg1->source);
    if (arg2) {
      arg1->source = (char *) malloc(strlen(arg2)+1);
      strcpy((char*)arg1->source,arg2);
    } else {
      arg1->source = 0;
    }
  }
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_source_get(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_source_get");
  result = (char *) ((arg1)->source);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_real_source_url_set(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_real_source_url_set");
  arg2 = (char*)lua_tostring(L, 2);
  {
    if (arg1->real_source_url) free((char*)arg1->real_source_url);
    if (arg2) {
      arg1->real_source_url = (char *) malloc(strlen(arg2)+1);
      strcpy((char*)arg1->real_source_url,arg2);
    } else {
      arg1->real_source_url = 0;
    }
  }
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_real_source_url_get(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_real_source_url_get");
  result = (char *) ((arg1)->real_source_url);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_real_source_title_set(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_real_source_title_set");
  arg2 = (char*)lua_tostring(L, 2);
  {
    if (arg1->real_source_title) free((char*)arg1->real_source_title);
    if (arg2) {
      arg1->real_source_title = (char *) malloc(strlen(arg2)+1);
      strcpy((char*)arg1->real_source_title,arg2);
    } else {
      arg1->real_source_title = 0;
    }
  }
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_real_source_title_get(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_real_source_title_get");
  result = (char *) ((arg1)->real_source_title);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_description_set(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_description_set");
  arg2 = (char*)lua_tostring(L, 2);
  {
    if (arg1->description) free((char*)arg1->description);
    if (arg2) {
      arg1->description = (char *) malloc(strlen(arg2)+1);
      strcpy((char*)arg1->description,arg2);
    } else {
      arg1->description = 0;
    }
  }
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_description_get(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_description_get");
  result = (char *) ((arg1)->description);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_id_set(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_id_set");
  arg2 = (char*)lua_tostring(L, 2);
  {
    if (arg1->id) free((char*)arg1->id);
    if (arg2) {
      arg1->id = (char *) malloc(strlen(arg2)+1);
      strcpy((char*)arg1->id,arg2);
    } else {
      arg1->id = 0;
    }
  }
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_id_get(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_id_get");
  result = (char *) ((arg1)->id);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_metadata_set(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  GSList *arg2 = (GSList *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_metadata_set");
  arg2=(GSList *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_GSList,0,2,"item_metadata_set");
  if (arg1) (arg1)->metadata = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_metadata_get(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  GSList *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_metadata_get");
  result = (GSList *) ((arg1)->metadata);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GSList,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_tmpdata_set(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  GHashTable *arg2 = (GHashTable *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_tmpdata_set");
  arg2=(GHashTable *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_GHashTable,0,2,"item_tmpdata_set");
  if (arg1) (arg1)->tmpdata = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_tmpdata_get(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  GHashTable *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_tmpdata_get");
  result = (GHashTable *) ((arg1)->tmpdata);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GHashTable,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_time_set(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  time_t arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_time_set");
  {
    time_t * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_time_t,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->time = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_time_get(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  time_t result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_time_get");
  result =  ((arg1)->time);
  SWIG_arg=0;
  {
    time_t * resultptr;
    resultptr = (time_t *) malloc(sizeof(time_t));
    memmove(resultptr, &result, sizeof(time_t));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_time_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_nr_set(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  gulong arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_nr_set");
  {
    gulong * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gulong,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->nr = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_nr_get(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  gulong result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_nr_get");
  result =  ((arg1)->nr);
  SWIG_arg=0;
  {
    gulong * resultptr;
    resultptr = (gulong *) malloc(sizeof(gulong));
    memmove(resultptr, &result, sizeof(gulong));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gulong,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_itemSet_set(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  struct itemSet *arg2 = (struct itemSet *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_itemSet_set");
  arg2=(struct itemSet *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_itemSet,0,2,"item_itemSet_set");
  if (arg1) (arg1)->itemSet = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_itemSet_get(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  struct itemSet *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_itemSet_get");
  result = (struct itemSet *) ((arg1)->itemSet);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_itemSet,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_sourceNr_set(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  gulong arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_sourceNr_set");
  {
    gulong * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gulong,0)) SWIG_fail;
    arg2 = *argp;
  }
  if (arg1) (arg1)->sourceNr = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_sourceNr_get(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  gulong result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_sourceNr_get");
  result =  ((arg1)->sourceNr);
  SWIG_arg=0;
  {
    gulong * resultptr;
    resultptr = (gulong *) malloc(sizeof(gulong));
    memmove(resultptr, &result, sizeof(gulong));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gulong,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_sourceNode_set(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  struct node *arg2 = (struct node *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_sourceNode_set");
  arg2=(struct node *)SWIG_MustGetPtr(L,2,SWIGTYPE_p_node,0,2,"item_sourceNode_set");
  if (arg1) (arg1)->sourceNode = arg2;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_sourceNode_get(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  struct node *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_sourceNode_get");
  result = (struct node *) ((arg1)->sourceNode);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_node,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_item(lua_State* L) {
  int SWIG_arg = -1;
  struct item *result = 0 ;
  
  result = (struct item *)(struct item *) calloc(1, sizeof(struct item));
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_item,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_item(lua_State* L) {
  int SWIG_arg = -1;
  struct item *arg1 = (struct item *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(struct item *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"delete_item");
  free((char *) arg1);
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_item(void *obj) {
struct item *arg1 = (struct item *) obj;
free((char *) arg1);
}
static swig_lua_method swig_item_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_item_attributes[] = {
    { "readStatus",_wrap_item_readStatus_get, _wrap_item_readStatus_set},
    { "newStatus",_wrap_item_newStatus_get, _wrap_item_newStatus_set},
    { "popupStatus",_wrap_item_popupStatus_get, _wrap_item_popupStatus_set},
    { "updateStatus",_wrap_item_updateStatus_get, _wrap_item_updateStatus_set},
    { "flagStatus",_wrap_item_flagStatus_get, _wrap_item_flagStatus_set},
    { "hasEnclosure",_wrap_item_hasEnclosure_get, _wrap_item_hasEnclosure_set},
    { "title",_wrap_item_title_get, _wrap_item_title_set},
    { "source",_wrap_item_source_get, _wrap_item_source_set},
    { "real_source_url",_wrap_item_real_source_url_get, _wrap_item_real_source_url_set},
    { "real_source_title",_wrap_item_real_source_title_get, _wrap_item_real_source_title_set},
    { "description",_wrap_item_description_get, _wrap_item_description_set},
    { "id",_wrap_item_id_get, _wrap_item_id_set},
    { "metadata",_wrap_item_metadata_get, _wrap_item_metadata_set},
    { "tmpdata",_wrap_item_tmpdata_get, _wrap_item_tmpdata_set},
    { "time",_wrap_item_time_get, _wrap_item_time_set},
    { "nr",_wrap_item_nr_get, _wrap_item_nr_set},
    { "itemSet",_wrap_item_itemSet_get, _wrap_item_itemSet_set},
    { "sourceNr",_wrap_item_sourceNr_get, _wrap_item_sourceNr_set},
    { "sourceNode",_wrap_item_sourceNode_get, _wrap_item_sourceNode_set},
    {0,0,0}
};
static swig_lua_class *swig_item_bases[] = {0};
swig_lua_class _wrap_class_item = { "item", &SWIGTYPE_p_item,_wrap_new_item, swig_delete_item, swig_item_methods, swig_item_attributes, swig_item_bases };

static int _wrap_item_new(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr result;
  
  result = (itemPtr)item_new();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_item,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_copy(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr arg1 = (itemPtr) 0 ;
  itemPtr result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(itemPtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_copy");
  result = (itemPtr)item_copy(arg1);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_item,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_get_base_url(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr arg1 = (itemPtr) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(itemPtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_get_base_url");
  result = (char *)item_get_base_url(arg1);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_render(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr arg1 = (itemPtr) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(itemPtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_render");
  result = (char *)item_render(arg1);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_free(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr arg1 = (itemPtr) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(itemPtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_free");
  item_free(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_get_id(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr arg1 = (itemPtr) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(itemPtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_get_id");
  result = (char *)item_get_id(arg1);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_get_title(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr arg1 = (itemPtr) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(itemPtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_get_title");
  result = (char *)item_get_title(arg1);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_get_description(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr arg1 = (itemPtr) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(itemPtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_get_description");
  result = (char *)item_get_description(arg1);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_get_source(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr arg1 = (itemPtr) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(itemPtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_get_source");
  result = (char *)item_get_source(arg1);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_get_real_source_url(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr arg1 = (itemPtr) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(itemPtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_get_real_source_url");
  result = (char *)item_get_real_source_url(arg1);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_get_real_source_title(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr arg1 = (itemPtr) 0 ;
  char *result = 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(itemPtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_get_real_source_title");
  result = (char *)item_get_real_source_title(arg1);
  SWIG_arg=0;
  lua_pushstring(L,result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_set_title(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr arg1 = (itemPtr) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(itemPtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_set_title");
  arg2 = (char*)lua_tostring(L, 2);
  item_set_title(arg1,(char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_set_description(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr arg1 = (itemPtr) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(itemPtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_set_description");
  arg2 = (char*)lua_tostring(L, 2);
  item_set_description(arg1,(char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_set_source(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr arg1 = (itemPtr) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(itemPtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_set_source");
  arg2 = (char*)lua_tostring(L, 2);
  item_set_source(arg1,(char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_set_real_source_url(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr arg1 = (itemPtr) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(itemPtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_set_real_source_url");
  arg2 = (char*)lua_tostring(L, 2);
  item_set_real_source_url(arg1,(char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_set_real_source_title(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr arg1 = (itemPtr) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(itemPtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_set_real_source_title");
  arg2 = (char*)lua_tostring(L, 2);
  item_set_real_source_title(arg1,(char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_set_id(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr arg1 = (itemPtr) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  arg1=(itemPtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_set_id");
  arg2 = (char*)lua_tostring(L, 2);
  item_set_id(arg1,(char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_parse_cache(lua_State* L) {
  int SWIG_arg = -1;
  xmlNodePtr arg1 ;
  gboolean arg2 ;
  itemPtr result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  {
    xmlNodePtr * argp;
    if(SWIG_ConvertPtr(L,1,(void**)(&argp),SWIGTYPE_p_xmlNodePtr,0)) SWIG_fail;
    arg1 = *argp;
  }
  {
    gboolean * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gboolean,0)) SWIG_fail;
    arg2 = *argp;
  }
  result = (itemPtr)item_parse_cache(arg1,arg2);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_item,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_item_to_xml(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr arg1 = (itemPtr) 0 ;
  xmlNodePtr arg2 ;
  gboolean arg3 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  if(!lua_isuserdata(L,3)) SWIG_fail_arg(3);
  arg1=(itemPtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"item_to_xml");
  {
    xmlNodePtr * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_xmlNodePtr,0)) SWIG_fail;
    arg2 = *argp;
  }
  {
    gboolean * argp;
    if(SWIG_ConvertPtr(L,3,(void**)(&argp),SWIGTYPE_p_gboolean,0)) SWIG_fail;
    arg3 = *argp;
  }
  item_to_xml(arg1,arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_itemlist_get_displayed_node(lua_State* L) {
  int SWIG_arg = -1;
  struct node *result = 0 ;
  
  result = (struct node *)itemlist_get_displayed_node();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_node,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_itemlist_get_selected(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr result;
  
  result = (itemPtr)itemlist_get_selected();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_item,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_itemlist_merge_itemset(lua_State* L) {
  int SWIG_arg = -1;
  itemSetPtr arg1 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  {
    itemSetPtr * argp;
    if(SWIG_ConvertPtr(L,1,(void**)(&argp),SWIGTYPE_p_itemSetPtr,0)) SWIG_fail;
    arg1 = *argp;
  }
  itemlist_merge_itemset(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_itemlist_load(lua_State* L) {
  int SWIG_arg = -1;
  itemSetPtr arg1 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  {
    itemSetPtr * argp;
    if(SWIG_ConvertPtr(L,1,(void**)(&argp),SWIGTYPE_p_itemSetPtr,0)) SWIG_fail;
    arg1 = *argp;
  }
  itemlist_load(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_itemlist_unload(lua_State* L) {
  int SWIG_arg = -1;
  gboolean arg1 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  {
    gboolean * argp;
    if(SWIG_ConvertPtr(L,1,(void**)(&argp),SWIGTYPE_p_gboolean,0)) SWIG_fail;
    arg1 = *argp;
  }
  itemlist_unload(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_itemlist_set_two_pane_mode(lua_State* L) {
  int SWIG_arg = -1;
  gboolean arg1 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  {
    gboolean * argp;
    if(SWIG_ConvertPtr(L,1,(void**)(&argp),SWIGTYPE_p_gboolean,0)) SWIG_fail;
    arg1 = *argp;
  }
  itemlist_set_two_pane_mode(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_itemlist_get_two_pane_mode(lua_State* L) {
  int SWIG_arg = -1;
  gboolean result;
  
  result = itemlist_get_two_pane_mode();
  SWIG_arg=0;
  {
    gboolean * resultptr;
    resultptr = (gboolean *) malloc(sizeof(gboolean));
    memmove(resultptr, &result, sizeof(gboolean));
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gboolean,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_on_toggle_condensed_view_activate(lua_State* L) {
  int SWIG_arg = -1;
  GtkToggleAction *arg1 = (GtkToggleAction *) 0 ;
  gpointer arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(GtkToggleAction *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_GtkToggleAction,0,1,"on_toggle_condensed_view_activate");
  {
    gpointer * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gpointer,0)) SWIG_fail;
    arg2 = *argp;
  }
  on_toggle_condensed_view_activate(arg1,arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_itemlist_update_item(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr arg1 = (itemPtr) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(itemPtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"itemlist_update_item");
  itemlist_update_item(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_itemlist_remove_item(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr arg1 = (itemPtr) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(itemPtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"itemlist_remove_item");
  itemlist_remove_item(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_itemlist_remove_items(lua_State* L) {
  int SWIG_arg = -1;
  itemSetPtr arg1 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  {
    itemSetPtr * argp;
    if(SWIG_ConvertPtr(L,1,(void**)(&argp),SWIGTYPE_p_itemSetPtr,0)) SWIG_fail;
    arg1 = *argp;
  }
  itemlist_remove_items(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_itemlist_mark_all_read(lua_State* L) {
  int SWIG_arg = -1;
  itemSetPtr arg1 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  {
    itemSetPtr * argp;
    if(SWIG_ConvertPtr(L,1,(void**)(&argp),SWIGTYPE_p_itemSetPtr,0)) SWIG_fail;
    arg1 = *argp;
  }
  itemlist_mark_all_read(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_itemlist_mark_all_old(lua_State* L) {
  int SWIG_arg = -1;
  itemSetPtr arg1 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  {
    itemSetPtr * argp;
    if(SWIG_ConvertPtr(L,1,(void**)(&argp),SWIGTYPE_p_itemSetPtr,0)) SWIG_fail;
    arg1 = *argp;
  }
  itemlist_mark_all_old(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_itemlist_update_vfolder(lua_State* L) {
  int SWIG_arg = -1;
  vfolderPtr arg1 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  {
    vfolderPtr * argp;
    if(SWIG_ConvertPtr(L,1,(void**)(&argp),SWIGTYPE_p_vfolderPtr,0)) SWIG_fail;
    arg1 = *argp;
  }
  itemlist_update_vfolder(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_itemlist_selection_changed(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr arg1 = (itemPtr) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(itemPtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"itemlist_selection_changed");
  itemlist_selection_changed(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_itemlist_reset_date_format(lua_State* L) {
  int SWIG_arg = -1;
  
  itemlist_reset_date_format();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_itemlist_select_next_unread(lua_State* L) {
  int SWIG_arg = -1;
  
  itemlist_select_next_unread();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_itemlist_set_flag(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr arg1 = (itemPtr) 0 ;
  gboolean arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(itemPtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"itemlist_set_flag");
  {
    gboolean * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gboolean,0)) SWIG_fail;
    arg2 = *argp;
  }
  itemlist_set_flag(arg1,arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_itemlist_set_read_status(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr arg1 = (itemPtr) 0 ;
  gboolean arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(itemPtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"itemlist_set_read_status");
  {
    gboolean * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gboolean,0)) SWIG_fail;
    arg2 = *argp;
  }
  itemlist_set_read_status(arg1,arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_itemlist_set_update_status(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr arg1 = (itemPtr) 0 ;
  gboolean arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(itemPtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"itemlist_set_update_status");
  {
    gboolean * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gboolean,0)) SWIG_fail;
    arg2 = *argp;
  }
  itemlist_set_update_status(arg1,arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_itemlist_toggle_flag(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr arg1 = (itemPtr) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(itemPtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"itemlist_toggle_flag");
  itemlist_toggle_flag(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_itemlist_toggle_read_status(lua_State* L) {
  int SWIG_arg = -1;
  itemPtr arg1 = (itemPtr) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(itemPtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_item,0,1,"itemlist_toggle_read_status");
  itemlist_toggle_read_status(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feedlist_init(lua_State* L) {
  int SWIG_arg = -1;
  
  feedlist_init();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feedlist_get_root(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr result;
  
  result = (nodePtr)feedlist_get_root();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_node,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feedlist_get_selected(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr result;
  
  result = (nodePtr)feedlist_get_selected();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_node,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feedlist_get_insertion_point(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr result;
  
  result = (nodePtr)feedlist_get_insertion_point();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_node,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feedlist_get_unread_item_count(lua_State* L) {
  int SWIG_arg = -1;
  int result;
  
  result = (int)feedlist_get_unread_item_count();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feedlist_get_new_item_count(lua_State* L) {
  int SWIG_arg = -1;
  int result;
  
  result = (int)feedlist_get_new_item_count();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feedlist_reset_new_item_count(lua_State* L) {
  int SWIG_arg = -1;
  
  feedlist_reset_new_item_count();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feedlist_update_counters(lua_State* L) {
  int SWIG_arg = -1;
  gint arg1 ;
  gint arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  {
    gint * argp;
    if(SWIG_ConvertPtr(L,1,(void**)(&argp),SWIGTYPE_p_gint,0)) SWIG_fail;
    arg1 = *argp;
  }
  {
    gint * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gint,0)) SWIG_fail;
    arg2 = *argp;
  }
  feedlist_update_counters(arg1,arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feedlist_remove_node(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"feedlist_remove_node");
  feedlist_remove_node(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feedlist_schedule_save(lua_State* L) {
  int SWIG_arg = -1;
  
  feedlist_schedule_save();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feedlist_save(lua_State* L) {
  int SWIG_arg = -1;
  
  feedlist_save();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feedlist_selection_changed(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"feedlist_selection_changed");
  feedlist_selection_changed(arg1);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feedlist_find_unread_feed(lua_State* L) {
  int SWIG_arg = -1;
  nodePtr arg1 = (nodePtr) 0 ;
  nodePtr result;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  arg1=(nodePtr)SWIG_MustGetPtr(L,1,SWIGTYPE_p_node,0,1,"feedlist_find_unread_feed");
  result = (nodePtr)feedlist_find_unread_feed(arg1);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_node,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_on_menu_delete(lua_State* L) {
  int SWIG_arg = -1;
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  gpointer arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(GtkWidget *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_GtkWidget,0,1,"on_menu_delete");
  {
    gpointer * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gpointer,0)) SWIG_fail;
    arg2 = *argp;
  }
  on_menu_delete(arg1,arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_on_menu_update(lua_State* L) {
  int SWIG_arg = -1;
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  gpointer arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(GtkWidget *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_GtkWidget,0,1,"on_menu_update");
  {
    gpointer * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gpointer,0)) SWIG_fail;
    arg2 = *argp;
  }
  on_menu_update(arg1,arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_on_menu_update_all(lua_State* L) {
  int SWIG_arg = -1;
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  gpointer arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(GtkWidget *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_GtkWidget,0,1,"on_menu_update_all");
  {
    gpointer * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gpointer,0)) SWIG_fail;
    arg2 = *argp;
  }
  on_menu_update_all(arg1,arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_on_menu_allread(lua_State* L) {
  int SWIG_arg = -1;
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  gpointer arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(GtkWidget *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_GtkWidget,0,1,"on_menu_allread");
  {
    gpointer * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gpointer,0)) SWIG_fail;
    arg2 = *argp;
  }
  on_menu_allread(arg1,arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_on_menu_allfeedsread(lua_State* L) {
  int SWIG_arg = -1;
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  gpointer arg2 ;
  
  if(!lua_isuserdata(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  arg1=(GtkWidget *)SWIG_MustGetPtr(L,1,SWIGTYPE_p_GtkWidget,0,1,"on_menu_allfeedsread");
  {
    gpointer * argp;
    if(SWIG_ConvertPtr(L,2,(void**)(&argp),SWIGTYPE_p_gpointer,0)) SWIG_fail;
    arg2 = *argp;
  }
  on_menu_allfeedsread(arg1,arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "node_data_set", _wrap_node_data_set},
    { "node_data_get", _wrap_node_data_get},
    { "node_type_set", _wrap_node_type_set},
    { "node_type_get", _wrap_node_type_get},
    { "node_nodeType_set", _wrap_node_nodeType_set},
    { "node_nodeType_get", _wrap_node_nodeType_get},
    { "node_source_set", _wrap_node_source_set},
    { "node_source_get", _wrap_node_source_get},
    { "node_updateRequest_set", _wrap_node_updateRequest_set},
    { "node_updateRequest_get", _wrap_node_updateRequest_get},
    { "node_iconFile_set", _wrap_node_iconFile_set},
    { "node_iconFile_get", _wrap_node_iconFile_get},
    { "node_parent_set", _wrap_node_parent_set},
    { "node_parent_get", _wrap_node_parent_get},
    { "node_children_set", _wrap_node_children_set},
    { "node_children_get", _wrap_node_children_get},
    { "node_id_set", _wrap_node_id_set},
    { "node_id_get", _wrap_node_id_get},
    { "node_unreadCount_set", _wrap_node_unreadCount_set},
    { "node_unreadCount_get", _wrap_node_unreadCount_get},
    { "node_popupCount_set", _wrap_node_popupCount_set},
    { "node_popupCount_get", _wrap_node_popupCount_get},
    { "node_newCount_set", _wrap_node_newCount_set},
    { "node_newCount_get", _wrap_node_newCount_get},
    { "node_title_set", _wrap_node_title_set},
    { "node_title_get", _wrap_node_title_get},
    { "node_icon_set", _wrap_node_icon_set},
    { "node_icon_get", _wrap_node_icon_get},
    { "node_loaded_set", _wrap_node_loaded_set},
    { "node_loaded_get", _wrap_node_loaded_get},
    { "node_available_set", _wrap_node_available_set},
    { "node_available_get", _wrap_node_available_get},
    { "node_needsCacheSave_set", _wrap_node_needsCacheSave_set},
    { "node_needsCacheSave_get", _wrap_node_needsCacheSave_get},
    { "node_itemSet_set", _wrap_node_itemSet_set},
    { "node_itemSet_get", _wrap_node_itemSet_get},
    { "node_twoPane_set", _wrap_node_twoPane_set},
    { "node_twoPane_get", _wrap_node_twoPane_get},
    { "node_sortColumn_set", _wrap_node_sortColumn_set},
    { "node_sortColumn_get", _wrap_node_sortColumn_get},
    { "node_sortReversed_set", _wrap_node_sortReversed_set},
    { "node_sortReversed_get", _wrap_node_sortReversed_get},
    { "new_node", _wrap_new_node},
    { "delete_node", _wrap_delete_node},
    { "nodeType_capabilities_set", _wrap_nodeType_capabilities_set},
    { "nodeType_capabilities_get", _wrap_nodeType_capabilities_get},
    { "nodeType_initial_load_set", _wrap_nodeType_initial_load_set},
    { "nodeType_initial_load_get", _wrap_nodeType_initial_load_get},
    { "nodeType_load_set", _wrap_nodeType_load_set},
    { "nodeType_load_get", _wrap_nodeType_load_get},
    { "nodeType_save_set", _wrap_nodeType_save_set},
    { "nodeType_save_get", _wrap_nodeType_save_get},
    { "nodeType_unload_set", _wrap_nodeType_unload_set},
    { "nodeType_unload_get", _wrap_nodeType_unload_get},
    { "nodeType_reset_update_counter_set", _wrap_nodeType_reset_update_counter_set},
    { "nodeType_reset_update_counter_get", _wrap_nodeType_reset_update_counter_get},
    { "nodeType_request_update_set", _wrap_nodeType_request_update_set},
    { "nodeType_request_update_get", _wrap_nodeType_request_update_get},
    { "nodeType_request_auto_update_set", _wrap_nodeType_request_auto_update_set},
    { "nodeType_request_auto_update_get", _wrap_nodeType_request_auto_update_get},
    { "nodeType_remove_set", _wrap_nodeType_remove_set},
    { "nodeType_remove_get", _wrap_nodeType_remove_get},
    { "nodeType_mark_all_read_set", _wrap_nodeType_mark_all_read_set},
    { "nodeType_mark_all_read_get", _wrap_nodeType_mark_all_read_get},
    { "nodeType_render_set", _wrap_nodeType_render_set},
    { "nodeType_render_get", _wrap_nodeType_render_get},
    { "nodeType_request_add_set", _wrap_nodeType_request_add_set},
    { "nodeType_request_add_get", _wrap_nodeType_request_add_get},
    { "nodeType_request_properties_set", _wrap_nodeType_request_properties_set},
    { "nodeType_request_properties_get", _wrap_nodeType_request_properties_get},
    { "new_nodeType", _wrap_new_nodeType},
    { "delete_nodeType", _wrap_delete_nodeType},
    { "node_type_register", _wrap_node_type_register},
    { "node_new", _wrap_node_new},
    { "node_add_child", _wrap_node_add_child},
    { "node_request_interactive_add", _wrap_node_request_interactive_add},
    { "node_request_automatic_add", _wrap_node_request_automatic_add},
    { "node_request_remove", _wrap_node_request_remove},
    { "node_add_data", _wrap_node_add_data},
    { "node_is_ancestor", _wrap_node_is_ancestor},
    { "node_get_title", _wrap_node_get_title},
    { "node_set_title", _wrap_node_set_title},
    { "node_get_unread_count", _wrap_node_get_unread_count},
    { "node_update_unread_count", _wrap_node_update_unread_count},
    { "node_update_new_count", _wrap_node_update_new_count},
    { "node_mark_all_read", _wrap_node_mark_all_read},
    { "node_set_icon", _wrap_node_set_icon},
    { "node_get_icon", _wrap_node_get_icon},
    { "node_get_favicon_file", _wrap_node_get_favicon_file},
    { "node_new_id", _wrap_node_new_id},
    { "node_get_id", _wrap_node_get_id},
    { "node_set_id", _wrap_node_set_id},
    { "node_type_to_str", _wrap_node_type_to_str},
    { "node_str_to_type", _wrap_node_str_to_type},
    { "node_free", _wrap_node_free},
    { "node_update_counters", _wrap_node_update_counters},
    { "node_initial_load", _wrap_node_initial_load},
    { "node_load", _wrap_node_load},
    { "node_save", _wrap_node_save},
    { "node_unload", _wrap_node_unload},
    { "node_remove", _wrap_node_remove},
    { "node_reset_update_counter", _wrap_node_reset_update_counter},
    { "node_merge_items", _wrap_node_merge_items},
    { "node_get_itemset", _wrap_node_get_itemset},
    { "node_set_itemset", _wrap_node_set_itemset},
    { "node_render", _wrap_node_render},
    { "node_request_auto_update", _wrap_node_request_auto_update},
    { "node_request_update", _wrap_node_request_update},
    { "node_request_properties", _wrap_node_request_properties},
    { "node_update_favicon", _wrap_node_update_favicon},
    { "node_set_sort_column", _wrap_node_set_sort_column},
    { "node_set_two_pane_mode", _wrap_node_set_two_pane_mode},
    { "node_get_two_pane_mode", _wrap_node_get_two_pane_mode},
    { "node_foreach_child_full", _wrap_node_foreach_child_full},
    { "item_readStatus_set", _wrap_item_readStatus_set},
    { "item_readStatus_get", _wrap_item_readStatus_get},
    { "item_newStatus_set", _wrap_item_newStatus_set},
    { "item_newStatus_get", _wrap_item_newStatus_get},
    { "item_popupStatus_set", _wrap_item_popupStatus_set},
    { "item_popupStatus_get", _wrap_item_popupStatus_get},
    { "item_updateStatus_set", _wrap_item_updateStatus_set},
    { "item_updateStatus_get", _wrap_item_updateStatus_get},
    { "item_flagStatus_set", _wrap_item_flagStatus_set},
    { "item_flagStatus_get", _wrap_item_flagStatus_get},
    { "item_hasEnclosure_set", _wrap_item_hasEnclosure_set},
    { "item_hasEnclosure_get", _wrap_item_hasEnclosure_get},
    { "item_title_set", _wrap_item_title_set},
    { "item_title_get", _wrap_item_title_get},
    { "item_source_set", _wrap_item_source_set},
    { "item_source_get", _wrap_item_source_get},
    { "item_real_source_url_set", _wrap_item_real_source_url_set},
    { "item_real_source_url_get", _wrap_item_real_source_url_get},
    { "item_real_source_title_set", _wrap_item_real_source_title_set},
    { "item_real_source_title_get", _wrap_item_real_source_title_get},
    { "item_description_set", _wrap_item_description_set},
    { "item_description_get", _wrap_item_description_get},
    { "item_id_set", _wrap_item_id_set},
    { "item_id_get", _wrap_item_id_get},
    { "item_metadata_set", _wrap_item_metadata_set},
    { "item_metadata_get", _wrap_item_metadata_get},
    { "item_tmpdata_set", _wrap_item_tmpdata_set},
    { "item_tmpdata_get", _wrap_item_tmpdata_get},
    { "item_time_set", _wrap_item_time_set},
    { "item_time_get", _wrap_item_time_get},
    { "item_nr_set", _wrap_item_nr_set},
    { "item_nr_get", _wrap_item_nr_get},
    { "item_itemSet_set", _wrap_item_itemSet_set},
    { "item_itemSet_get", _wrap_item_itemSet_get},
    { "item_sourceNr_set", _wrap_item_sourceNr_set},
    { "item_sourceNr_get", _wrap_item_sourceNr_get},
    { "item_sourceNode_set", _wrap_item_sourceNode_set},
    { "item_sourceNode_get", _wrap_item_sourceNode_get},
    { "new_item", _wrap_new_item},
    { "delete_item", _wrap_delete_item},
    { "item_new", _wrap_item_new},
    { "item_copy", _wrap_item_copy},
    { "item_get_base_url", _wrap_item_get_base_url},
    { "item_render", _wrap_item_render},
    { "item_free", _wrap_item_free},
    { "item_get_id", _wrap_item_get_id},
    { "item_get_title", _wrap_item_get_title},
    { "item_get_description", _wrap_item_get_description},
    { "item_get_source", _wrap_item_get_source},
    { "item_get_real_source_url", _wrap_item_get_real_source_url},
    { "item_get_real_source_title", _wrap_item_get_real_source_title},
    { "item_set_title", _wrap_item_set_title},
    { "item_set_description", _wrap_item_set_description},
    { "item_set_source", _wrap_item_set_source},
    { "item_set_real_source_url", _wrap_item_set_real_source_url},
    { "item_set_real_source_title", _wrap_item_set_real_source_title},
    { "item_set_id", _wrap_item_set_id},
    { "item_parse_cache", _wrap_item_parse_cache},
    { "item_to_xml", _wrap_item_to_xml},
    { "itemlist_get_displayed_node", _wrap_itemlist_get_displayed_node},
    { "itemlist_get_selected", _wrap_itemlist_get_selected},
    { "itemlist_merge_itemset", _wrap_itemlist_merge_itemset},
    { "itemlist_load", _wrap_itemlist_load},
    { "itemlist_unload", _wrap_itemlist_unload},
    { "itemlist_set_two_pane_mode", _wrap_itemlist_set_two_pane_mode},
    { "itemlist_get_two_pane_mode", _wrap_itemlist_get_two_pane_mode},
    { "on_toggle_condensed_view_activate", _wrap_on_toggle_condensed_view_activate},
    { "itemlist_update_item", _wrap_itemlist_update_item},
    { "itemlist_remove_item", _wrap_itemlist_remove_item},
    { "itemlist_remove_items", _wrap_itemlist_remove_items},
    { "itemlist_mark_all_read", _wrap_itemlist_mark_all_read},
    { "itemlist_mark_all_old", _wrap_itemlist_mark_all_old},
    { "itemlist_update_vfolder", _wrap_itemlist_update_vfolder},
    { "itemlist_selection_changed", _wrap_itemlist_selection_changed},
    { "itemlist_reset_date_format", _wrap_itemlist_reset_date_format},
    { "itemlist_select_next_unread", _wrap_itemlist_select_next_unread},
    { "itemlist_set_flag", _wrap_itemlist_set_flag},
    { "itemlist_set_read_status", _wrap_itemlist_set_read_status},
    { "itemlist_set_update_status", _wrap_itemlist_set_update_status},
    { "itemlist_toggle_flag", _wrap_itemlist_toggle_flag},
    { "itemlist_toggle_read_status", _wrap_itemlist_toggle_read_status},
    { "feedlist_init", _wrap_feedlist_init},
    { "feedlist_get_root", _wrap_feedlist_get_root},
    { "feedlist_get_selected", _wrap_feedlist_get_selected},
    { "feedlist_get_insertion_point", _wrap_feedlist_get_insertion_point},
    { "feedlist_get_unread_item_count", _wrap_feedlist_get_unread_item_count},
    { "feedlist_get_new_item_count", _wrap_feedlist_get_new_item_count},
    { "feedlist_reset_new_item_count", _wrap_feedlist_reset_new_item_count},
    { "feedlist_update_counters", _wrap_feedlist_update_counters},
    { "feedlist_remove_node", _wrap_feedlist_remove_node},
    { "feedlist_schedule_save", _wrap_feedlist_schedule_save},
    { "feedlist_save", _wrap_feedlist_save},
    { "feedlist_selection_changed", _wrap_feedlist_selection_changed},
    { "feedlist_find_unread_feed", _wrap_feedlist_find_unread_feed},
    { "on_menu_delete", _wrap_on_menu_delete},
    { "on_menu_update", _wrap_on_menu_update},
    { "on_menu_update_all", _wrap_on_menu_update_all},
    { "on_menu_allread", _wrap_on_menu_allread},
    { "on_menu_allfeedsread", _wrap_on_menu_allfeedsread},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
{ SWIG_LUA_INT,     (char *)"NODE_TYPE_INVALID", (long) NODE_TYPE_INVALID, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"NODE_TYPE_FOLDER", (long) NODE_TYPE_FOLDER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"NODE_TYPE_ROOT", (long) NODE_TYPE_ROOT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"NODE_TYPE_VFOLDER", (long) NODE_TYPE_VFOLDER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"NODE_TYPE_FEED", (long) NODE_TYPE_FEED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"NODE_TYPE_SOURCE", (long) NODE_TYPE_SOURCE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"NODE_CAPABILITY_ADD_CHILDS", (long) NODE_CAPABILITY_ADD_CHILDS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"NODE_CAPABILITY_REMOVE_CHILDS", (long) NODE_CAPABILITY_REMOVE_CHILDS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"NODE_CAPABILITY_SUBFOLDERS", (long) NODE_CAPABILITY_SUBFOLDERS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"NODE_CAPABILITY_REMOVE_ITEMS", (long) NODE_CAPABILITY_REMOVE_ITEMS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"NODE_CAPABILITY_REORDER", (long) NODE_CAPABILITY_REORDER, 0, 0, 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__gboolean = {"_gboolean", "gboolean", 0, 0, (void*)0, 0};
static swig_type_info _swigt__gint = {"_gint", "gint", 0, 0, (void*)0, 0};
static swig_type_info _swigt__gpointer = {"_gpointer", "gpointer", 0, 0, (void*)0, 0};
static swig_type_info _swigt__guint = {"_guint", "guint", 0, 0, (void*)0, 0};
static swig_type_info _swigt__gulong = {"_gulong", "gulong", 0, 0, (void*)0, 0};
static swig_type_info _swigt__itemSetPtr = {"_itemSetPtr", "itemSetPtr", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GHashTable = {"_p_GHashTable", "GHashTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GList = {"_p_GList", "GList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GSList = {"_p_GSList", "GSList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GtkToggleAction = {"_p_GtkToggleAction", "GtkToggleAction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GtkWidget = {"_p_GtkWidget", "GtkWidget *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_node__p_char = {"_p_f_p_struct_node__p_char", "char *(*)(struct node *)|char *(*)(nodePtr)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_node__void = {"_p_f_p_struct_node__void", "void (*)(struct node *)|void (*)(nodePtr)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_node_guint__void = {"_p_f_p_struct_node_guint__void", "void (*)(struct node *,guint)|void (*)(nodePtr,guint)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gboolean = {"_p_gboolean", "gboolean *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gint = {"_p_gint", "gint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gpointer = {"_p_gpointer", "gpointer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_guint = {"_p_guint", "guint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gulong = {"_p_gulong", "gulong *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_item = {"_p_item", "struct item *|itemPtr", 0, 0, (void*)&_wrap_class_item, 0};
static swig_type_info _swigt__p_itemSet = {"_p_itemSet", "struct itemSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_itemSetPtr = {"_p_itemSetPtr", "itemSetPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_node = {"_p_node", "struct node *|nodePtr", 0, 0, (void*)&_wrap_class_node, 0};
static swig_type_info _swigt__p_nodeSource = {"_p_nodeSource", "struct nodeSource *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_nodeType = {"_p_nodeType", "struct nodeType *|nodeTypePtr", 0, 0, (void*)&_wrap_class_nodeType, 0};
static swig_type_info _swigt__p_request = {"_p_request", "struct request *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_time_t = {"_p_time_t", "time_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vfolderPtr = {"_p_vfolderPtr", "vfolderPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xmlNodePtr = {"_p_xmlNodePtr", "xmlNodePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__time_t = {"_time_t", "time_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__vfolderPtr = {"_vfolderPtr", "vfolderPtr", 0, 0, (void*)0, 0};
static swig_type_info _swigt__xmlNodePtr = {"_xmlNodePtr", "xmlNodePtr", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__gboolean,
  &_swigt__gint,
  &_swigt__gpointer,
  &_swigt__guint,
  &_swigt__gulong,
  &_swigt__itemSetPtr,
  &_swigt__p_GHashTable,
  &_swigt__p_GList,
  &_swigt__p_GSList,
  &_swigt__p_GtkToggleAction,
  &_swigt__p_GtkWidget,
  &_swigt__p_f_p_struct_node__p_char,
  &_swigt__p_f_p_struct_node__void,
  &_swigt__p_f_p_struct_node_guint__void,
  &_swigt__p_gboolean,
  &_swigt__p_gint,
  &_swigt__p_gpointer,
  &_swigt__p_guint,
  &_swigt__p_gulong,
  &_swigt__p_item,
  &_swigt__p_itemSet,
  &_swigt__p_itemSetPtr,
  &_swigt__p_node,
  &_swigt__p_nodeSource,
  &_swigt__p_nodeType,
  &_swigt__p_request,
  &_swigt__p_time_t,
  &_swigt__p_vfolderPtr,
  &_swigt__p_xmlNodePtr,
  &_swigt__time_t,
  &_swigt__vfolderPtr,
  &_swigt__xmlNodePtr,
};

static swig_cast_info _swigc__gboolean[] = {  {&_swigt__gboolean, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__gint[] = {  {&_swigt__gint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__gpointer[] = {  {&_swigt__gpointer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__guint[] = {  {&_swigt__guint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__gulong[] = {  {&_swigt__gulong, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__itemSetPtr[] = {  {&_swigt__itemSetPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GHashTable[] = {  {&_swigt__p_GHashTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GList[] = {  {&_swigt__p_GList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GSList[] = {  {&_swigt__p_GSList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GtkToggleAction[] = {  {&_swigt__p_GtkToggleAction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GtkWidget[] = {  {&_swigt__p_GtkWidget, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_node__p_char[] = {  {&_swigt__p_f_p_struct_node__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_node__void[] = {  {&_swigt__p_f_p_struct_node__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_node_guint__void[] = {  {&_swigt__p_f_p_struct_node_guint__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gboolean[] = {  {&_swigt__p_gboolean, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gint[] = {  {&_swigt__p_gint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpointer[] = {  {&_swigt__p_gpointer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_guint[] = {  {&_swigt__p_guint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gulong[] = {  {&_swigt__p_gulong, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_item[] = {  {&_swigt__p_item, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_itemSet[] = {  {&_swigt__p_itemSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_itemSetPtr[] = {  {&_swigt__p_itemSetPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_node[] = {  {&_swigt__p_node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nodeSource[] = {  {&_swigt__p_nodeSource, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nodeType[] = {  {&_swigt__p_nodeType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_request[] = {  {&_swigt__p_request, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_time_t[] = {  {&_swigt__p_time_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vfolderPtr[] = {  {&_swigt__p_vfolderPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xmlNodePtr[] = {  {&_swigt__p_xmlNodePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__time_t[] = {  {&_swigt__time_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__vfolderPtr[] = {  {&_swigt__vfolderPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__xmlNodePtr[] = {  {&_swigt__xmlNodePtr, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__gboolean,
  _swigc__gint,
  _swigc__gpointer,
  _swigc__guint,
  _swigc__gulong,
  _swigc__itemSetPtr,
  _swigc__p_GHashTable,
  _swigc__p_GList,
  _swigc__p_GSList,
  _swigc__p_GtkToggleAction,
  _swigc__p_GtkWidget,
  _swigc__p_f_p_struct_node__p_char,
  _swigc__p_f_p_struct_node__void,
  _swigc__p_f_p_struct_node_guint__void,
  _swigc__p_gboolean,
  _swigc__p_gint,
  _swigc__p_gpointer,
  _swigc__p_guint,
  _swigc__p_gulong,
  _swigc__p_item,
  _swigc__p_itemSet,
  _swigc__p_itemSetPtr,
  _swigc__p_node,
  _swigc__p_nodeSource,
  _swigc__p_nodeType,
  _swigc__p_request,
  _swigc__p_time_t,
  _swigc__p_vfolderPtr,
  _swigc__p_xmlNodePtr,
  _swigc__time_t,
  _swigc__vfolderPtr,
  _swigc__xmlNodePtr,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head;
  static int init_run = 0;

  clientdata = clientdata;

  if (init_run) return;
  init_run = 1;

  /* Initialize the swig_module */
  swig_module.type_initial = swig_type_initial;
  swig_module.cast_initial = swig_cast_initial;

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (module_head) {
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  } else {
    /* This is the first module loaded */
    swig_module.next = &swig_module;
    SWIG_SetModule(clientdata, &swig_module);
  }
		 
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
#ifdef __cplusplus
extern "C" {
#endif
void SWIG_init_user(lua_State* L );

/* this is the initialization function
	added at the very end of the code
	the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
	int i;

	/* start with global table */
	lua_pushvalue(L,LUA_GLOBALSINDEX);

	SWIG_InitializeModule((void*)L);
	SWIG_PropagateClientData();

	/* invoke user-specific initialization */
	SWIG_init_user(L);

	/* add a global fn */
	SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
	SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);

	/* begin the module (its a table with the same name as the module) */
	SWIG_Lua_module_begin(L,SWIG_name);
	/* add commands/functions */
	for (i = 0; swig_commands[i].name; i++){
		SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
	}
	/*luaL_openlib(L,NULL,swig_commands,0);*/
	/* all in one */
	/*luaL_openlib(L,SWIG_name,swig_commands,0);*/
	/* add variables */
	for (i = 0; swig_variables[i].name; i++){
		SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
	}

	/* additional registration structs & classes in lua: */
	for (i = 0; swig_types[i]; i++){
		if (swig_types[i]->clientdata){
			SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
		}
	}

	/* constants */
	SWIG_Lua_InstallConstants(L,swig_constants);

	/* end module */
	/*SWIG_Lua_module_end(L);*/
	lua_pop(L,1);  /* tidy stack (remove module table)*/
	lua_pop(L,1);  /* tidy stack (remove global table)*/

	return 1;
}

/* Lua 5.1 has a different name for importing libraries
luaopen_XXX, where XXX is the name of the module (not capitalised)
this function will allow Lua 5.1 to import correctly.
There is a #define in the wrapper to rename 'SWIG_import' to the correct name
*/

SWIGEXPORT int SWIG_import(lua_State* L)
{
	return SWIG_init(L);
}

#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C"
#endif
void SWIG_init_user(lua_State* L)
{
  
}

